<%- include('nav bar/navbar.ejs') %>
    <title>ITEM Database</title>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <link rel='stylesheet' href='/stylesheets/receipt.css' />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    
    
    <head> 
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    </head>
    
    
    
    
    
    
    
    <main class="table">
        <div class="form-conntainer" style=" height: 650px;   overflow-y: auto;">

                <script>
        console.log("<%= nextSerialNumber %>");
    </script>

<section class="table__header">
    <h1>Receipt No: #<%= nextSerialNumber %></h1>  
    
     
</section>

<form id="myForm" action="/receipt1234" method="POST">








  <section class="table__body">
    <input type="hidden" id="serialNumber" name="serialNumber" value="<%= nextSerialNumber %>" readonly>




    <div>
      <div class="-flex flex-wrap p-6 rounded-md ">
        <div class="flex flex-wrap -mx-2 mb-4">
          <div class="w-full md:w-1/4 px-2 mb-4 md:mb-0 relative">
            <!-- Label + Checkbox in one row -->
            <div class="flex items-center justify-between mb-2">
              <label for="datetimereceipt" class="text-gray-700 text-sm font-semibold">
                Date and Time
              </label>
              <div class="flex items-center gap-2 px-3 py-2 bg-white rounded-lg border border-gray-300 shadow-sm hover:shadow-md transition duration-200 ease-in-out">
                <input
                  type="checkbox"
                  id="eveningTime"
                  name="eveningTime"
                  value="yes"
                  class="form-checkbox h-5 w-5 text-blue-600 focus:ring-blue-500 cursor-pointer transition duration-150 ease-in-out"
                />
                <label
                  for="eveningTime"
                  class="text-sm text-gray-800 font-medium cursor-pointer select-none hover:text-blue-600"
                >
                  Next Day 
                </label>
              </div>
              
              
            </div>
          
            <!-- DateTime Picker -->
            <input id="datetimereceipt" name="datetimereceipt"
              class="w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
              type="datetime-local">
          </div>
          
          <!-- JavaScript to toggle between next day 8:30 AM and current time -->
          <script>
            const checkbox = document.getElementById('eveningTime');
            const datetimeInput = document.getElementById('datetimereceipt');
          
            // Function to format date to local datetime-local input value (YYYY-MM-DDTHH:MM)
            function formatDateToInputValue(date) {
              const pad = (n) => n.toString().padStart(2, '0');
              const year = date.getFullYear();
              const month = pad(date.getMonth() + 1);
              const day = pad(date.getDate());
              const hours = pad(date.getHours());
              const minutes = pad(date.getMinutes());
              return `${year}-${month}-${day}T${hours}:${minutes}`;
            }
          
            checkbox.addEventListener('change', () => {
              const now = new Date();
              if (checkbox.checked) {
                now.setDate(now.getDate() + 1);  // Tomorrow
                now.setHours(8, 30, 0, 0);       // 8:30 AM
              } else {
                now.setSeconds(0, 0);            // Current clean time
              }
              datetimeInput.value = formatDateToInputValue(now);
            });
          </script>
          
          
          
          
          
    
          <div class="w-full md:w-1/4 px-2">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="Attachorderno">Attach Order No</label>
            <input id="Attachorderno" name="Attachorderno" placeholder="Attach Order No" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">
          </div>
    
          <div class="w-full md:w-1/6 px-2">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="callafter">Call After</label>
            <input id="callafter" name="callafter" placeholder="Call after days" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">
          </div>
          
          <!-- Updated Receipt Count Box with new stylish styling -->
          <div id="receiptInitCountBox" style="
          margin-top: 0.2rem;
          padding: 0.05rem 0.6rem; /* Further reduced padding */
          border: 1px solid #ccc;
          background-color: #e0f7fa;
          border-radius: 5px;
          text-align: center;
          font-weight: bold;
          font-size: 1.5rem; /* Adjusted font size */
          color: #000000;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
          min-width: 5rem; /* Ensure proper width */
          height: 5rem; /* Explicit height control */
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer; /* Improves interactivity */
          transition: background-color 0.3s ease, transform 0.2s ease;
        "
        onmouseover="this.style.backgroundColor='#b2ebf2'; this.style.transform='scale(1.05)';"
        onmouseout="this.style.backgroundColor='#e0f7fa'; this.style.transform='scale(1)';"
></div>

        
        
        </div>
      </div>

            <div class="flex flex-wrap p-6 rounded-md">
              <div class="w-full md:w-1/4 px-3 mb-6 md:mb-0 relative">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputusername">Name</label>
                <div>
                    <input id="inputusername" name="Name" placeholder="Name" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

                  <div id="autocompleteDropdown" class="autocomplete-dropdownn"></div>
                </div>
              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputAddress">Address</label>
                <input id="inputAddress" name="Address" placeholder="Address" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputPhone">Phone</label>
                <input id="inputPhone" name="Phone" placeholder="Phone" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">
                <p id="phoneError" class="text-red-500 text-xs mt-1" style="display: none;">Phone number must be exactly 10 digits.</p>
              </div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
  const phoneInput = document.getElementById('inputPhone');
  const phoneError = document.getElementById('phoneError');

  phoneInput.addEventListener('input', function() {
    const phoneValue = phoneInput.value;

    // Check if phone number is exactly 10 digits
    if (phoneValue.length !== 10 || isNaN(phoneValue)) {
      phoneError.style.display = 'block';
    } else {
      phoneError.style.display = 'none';
    }
  });
});

</script>              
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputcomment">Comment</label>
                <input id="inputcomment" name="comment" placeholder="Comment" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

              </div>
            </div>
        
        
            <div class="flex flex-wrap p-6 rounded-md">
              <div class="w-full md:w-1/4 px-3 mb-6 md:mb-0 relative">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputusername"> Contact Person </label>
                <div>
                    <input id="inputusernamesite" name="Namesite" placeholder="Contact Person Name" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

                </div>
              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputAddress">Contact Person Address</label>
                <input id="inputAddresssite" name="Addresssite" placeholder="Contact Person Address" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputPhone">Contact Person Phone</label>
                <input id="inputPhonesite" name="Phonesite" placeholder="Contact Person Phone" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputcomment">Comment</label>
                <input id="inputcommentsite" name="commentsite" placeholder="Contact Person Comment" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">
              </div>

            </div>
      </div>








      <script>
             
$(document).ready(function() {
      // Function to toggle the visibility of the form
      function toggleForm() {
        $("#formm-rows").slideToggle();
      }

      // Attach click event to the button
      $("#toggle-form-buttonn").click(toggleForm);
    });
    
      </script>
<style>

#formm-rows {
      display: none; /* Initially hide the form */
    }

#toggle-form-buttonn {
      padding: 10px 15px;
      background-color: #3498db;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin: 12px;
      width: 200px;
    }

    #toggle-form-buttonn:hover {
      background-color: #2980b9;
    }

  /* Reset some default styles for button */
 

.add-buttonnn,
.delete-buttonnn {
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s ease, color 0.3s ease;
    margin: 10px;
}

.add-buttonnn {
    background-color: #4CAF50;
    color: white;
    padding: 12px 24px;
    margin-right: 10px;
}

.add-buttonnn:hover {
    background-color: #45a049;
}

.delete-buttonnn {
    background-color: #f44336;
    color: white;
    padding: 12px 24px;
}

.delete-buttonnn:hover {
    background-color: #d32f2f;
}



#Wrapperrr {
      display: flex;
      width: 180px;
      
    }

   

    #Wrapperrr input {
        width: 45%;
      margin-right: 5px;
    }

    #Wrapperrr h1 {
      margin: 5px;
      height: 15px; 
      font-size: 25px;
      
    }
  
    #Wrapperrr {
    display: flex;
    width: 180px;
}



</style>


<script>



let rowCounterfarma = 1; // Counter for unique IDs

function addfarmaRow() {
  const formRows = document.getElementById('formm-rows');
  const newRow = document.createElement('div');
  newRow.className = 'formm-row';
  newRow.innerHTML = `
  <div id="linehorizontal" class="flex-container">

    <div id="Wrapper">
  <label for="datetimefarma${rowCounterfarma}">Date and Time:</label>
  <input type="datetime-local" id="datetimefarma${rowCounterfarma}" name="datetimefarma[]" ></div>

   
  <div id="Wrapper">

          <label for="length">Farma:</label>

          <div id="Wrapperrr">
            <input type="text" name="length1[]" list="lengthOptions" placeholder="Select or enter length">

         <datalist id="lengthOptions">
         <option value="9&quot">
         <option value="12&quot">
        <option value="15&quot">
            <option value="18&quot">
                <option value="21&quot">
                    <option value="24&quot">
                        <option value="27&quot">
         </datalist>
          <h1> X </h1>
          <input type="text" name="length2[]" list="length2Options" placeholder="Select or enter length">

<datalist id="length2Options">
    <option value="9">
         <option value="12&quot">
        <option value="15&quot">
            <option value="18&quot">
                <option value="21&quot">
                    <option value="24&quot">
                        <option value="27&quot">
  <!-- Add other options as needed -->
</datalist>
         </div>      
          </div>

   
   
          <div id="Wrapper">
          <label for="quantityfarma">Quantity:</label>
          <input type="text" name="quantityfarma[]">
          </div>

          
          
          <div id="Wrapper">
          <label for="ratefarma">Rent per set :</label>

          <input type="text" name="ratefarma[]" list="rateOptions" placeholder="Select or enter rate">

            <datalist id="rateOptions">
            <option value="70">
             <option value="150">
  
                
         </datalist>

          <br>
          </div>

          <div id="Wrapper">
            <label for="totalfarma">Total:</label>
            <input type="number" name="totalfarma[]">
            </div>

          <div id="Wrapper">
            <label for="heightfarma">Height:</label>
          <select name="heightfarma[]">
          <option value="Height 5ft">5ft</option>
          <option value="Height 6ft">6ft</option>
          <option value="Height 9ft">9ft</option>
          <option value="Height 10ft">10ft</option>
         </select>
    </div>

    
</div>

     
<div id="linehorizontal" class="flex-container">

     <div id="Wrapper">
    <label for="farmaplate9inch">Plate 9":</label>
    <input type="text" name="farmaplate9inch[]" >
   </div><div id="Wrapper">
    <label for="farmaplate12inch">Plate 12":</label>
    <input type="text" name="farmaplate12inch[]" >
</div><div id="Wrapper">
    
    <label for="farmaplate15inch">Plate 15":</label>
    <input type="text" name="farmaplate15inch[]" >
</div><div id="Wrapper">
    
    <label for="farmaplate18inch">Plate 18":</label>
    <input type="text" name="farmaplate18inch[]" >
</div><div id="Wrapper">
    <label for="farmaplate21inch">Plate 21":</label>
    <input type="text" name="farmaplate21inch[]" >
</div><div id="Wrapper">
    
    <label for="farmaplate24inch">Plate 24":</label>
    <input type="text" name="farmaplate24inch[]" >
</div><div id="Wrapper">
    
    <label for="farmaplate27inch">Plate 27":</label>
    <input type="text" name="farmaplate27inch[]" >
</div>

</div>
<hr> 
  `;
  formRows.appendChild(newRow);

  // Update the new datetime input value
  const newDatetimeInput = newRow.querySelector(`input[type="datetime-local"]`);
  newDatetimeInput.value = getCurrentDateTime();


 

  rowCounterfarma++; // Increment the counter for the next ID
}

function deletefarmaRow() {
  const formRows = document.getElementById('formm-rows');
  const rows = formRows.getElementsByClassName('formm-row');
  if (rows.length > 1) {
    formRows.removeChild(rows[rows.length - 1]);
  }
}





</script>

       <button type="button" id="toggle-form-buttonn">Farma Calculation</button>
      <div id="formm-rows">
        <div class="formm-row">
          <div class="row">
            <button type="button" onclick="addfarmaRow()" class="add-buttonnn"><i class="fa-solid fa-plus"></i> ADD ROW</button>
            <button type="button" onclick="deletefarmaRow()" class="delete-buttonnn"><i class="fa-solid fa-trash-can"></i> DELETE LAST ROW</button>
          </div>

          <div style="display: flex; flex-wrap: wrap;">
            <div style="margin-left: 10px;margin-right: 10px; ">
                <label for="nutboltfarma">Nut bolt:</label>
                <input type="number" name="nutboltfarma">
            </div>
            <div>
                <label for="keyfarma">Key:</label>
                <input type="number" name="keyfarma" >
            </div>
        </div>
        
        
          
        <div id="linehorizontal" class="flex-container">

            <div id="Wrapper">
                <label for="datetimefarma">Date and Time:</label>
                <input type="datetime-local" id="datetimefarma" name="datetimefarma[]" >
                </div>
       
        <div id="Wrapper">
        <label for="length">Farma:</label>
        <div id="Wrapperrr">
          <input type="text" name="length1[]" list="length1Options" placeholder="Select or enter length">

          <datalist id="length1Options">
              <option value="9&quot">
                  <option value="12&quot">
                 <option value="15&quot">
                     <option value="18&quot">
                         <option value="21&quot">
                             <option value="24&quot">
                                 <option value="27&quot">
            <!-- Add other options as needed -->
          </datalist>
        <h1> X </h1>
        <input type="text" name="length2[]" list="length2Options" placeholder="Select or enter length">

<datalist id="length2Options">
  <option value="9&quot">
      <option value="12&quot">
     <option value="15&quot">
         <option value="18&quot">
             <option value="21&quot">
                 <option value="24&quot">
                     <option value="27&quot">
<!-- Add other options as needed -->
</datalist>
       </div>      
        </div>

        <div id="Wrapper">
          <label for="quantityfarma">Quantity:</label>
          <input type="number" name="quantityfarma[]" id="quantityfarma" oninput="calculateTotal()">
      </div>
      
      <div id="Wrapper">
          <label for="ratefarma">Rent per set:</label>
          <input type="text" name="ratefarma[]" id="ratefarma" list="rateOptions" placeholder="Select or enter rate" oninput="calculateTotal()">
      
          <datalist id="rateOptions">
              <option value="70"></option>
              <option value="150"></option>
          </datalist>
          <br>
      </div>
      
      <div id="Wrapper">
          <label for="totalfarma">Total:</label>
          <input type="number" name="totalfarma[]" id="totalfarma" readonly>
      </div>
      
      <script>
          function calculateTotal() {
              var quantity = document.getElementById('quantityfarma').value;
              var rate = document.getElementById('ratefarma').value;
      
              // Convert values to numbers to avoid NaN
              quantity = quantity ? parseFloat(quantity) : 0;
              rate = rate ? parseFloat(rate) : 0;
      
              var total = quantity * rate;
              document.getElementById('totalfarma').value = total;
          }
      </script>
      






        <div id="Wrapper">
          <label for="heightfarma"> Height:</label>
        <select name="heightfarma[]">
          <option value="Height 5ft">5ft</option>
          <option value="Height 6ft">6ft</option>
          <option value="Height 9ft">9ft</option>
          <option value="Height 10ft">10ft</option>
        </select>
        </div>

<style>


#Wrapper {
      margin: 20px;
      padding: 10px;
    
    }

    label {
      font-weight: bold;
    }

    select {
      padding: 5px;
      margin: 5px;
      height: 45px;
      border: 1px solid #414040;
      border-radius: 3px;
    }
</style>

          </div>
          
        
        
        <div id="linehorizontal" class="flex-container">

          <div id="Wrapper">
              <label for="farmaplate12inch">Plate 9":</label>
              <input type="number" name="farmaplate9inch[]" id="farmaplate9inch">
              <label class="stock-label" for="FarmaPlate9">
                  
                  <% if (allproducts && allproducts.length > 0) { %>

                      <% const farma9inch5ft = allproducts.find(product => product.itemName === 'Farma plate 9" ' && product.itemCategory === '3'); %>
                      <% const farma9inch6ft = allproducts.find(product => product.itemName === 'Farma plate 9" ' && product.itemCategory === '4'); %>
                      <% const farma9inch9ft = allproducts.find(product => product.itemName === 'Farma plate 9" ' && product.itemCategory === '5'); %>
                      <% const farma9inch10ft = allproducts.find(product => product.itemName === 'Farma plate 9" ' && product.itemCategory === '6'); %>
                      <% if (farma9inch5ft) { %>
                          <span class="stock-number" id="farmaStock"><%= farma9inch5ft.workingQuantity %>/<%= farma9inch6ft.workingQuantity %>/<%= farma9inch9ft.workingQuantity %>/<%= farma9inch10ft.workingQuantity %></span>

                      <% } else { %>
                          <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
                      <% } %>
                  <% } else { %>
                      <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
                  <% } %>

              </label>
          </div>


        <div id="Wrapper">
        <label for="farmaplate12inch">Plate 12":</label>
        <input type="text" name="farmaplate12inch[]" >
        <label class="stock-label" for="FarmaPlate12">
                  
          <% if (allproducts && allproducts.length > 0) { %>

              <% const farma12inch5ft = allproducts.find(product => product.itemName === 'Farma plate 12"' && product.itemCategory === '3'); %>
              <% const farma12inch6ft = allproducts.find(product => product.itemName === 'Farma plate 12"' && product.itemCategory === '4'); %>
              <% const farma12inch9ft = allproducts.find(product => product.itemName === 'Farma plate 12"' && product.itemCategory === '5'); %>
              <% const farma12inch10ft = allproducts.find(product => product.itemName === 'Farma plate 12"' && product.itemCategory === '6'); %>
              <% if (farma12inch5ft) { %>
                  <span class="stock-number" id="farmaStock"><%= farma12inch5ft.workingQuantity %>/<%= farma12inch6ft.workingQuantity %>/<%= farma12inch9ft.workingQuantity %>/<%= farma12inch10ft.workingQuantity %></span>

              <% } else { %>
                  <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
              <% } %>
          <% } else { %>
              <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
          <% } %>

      </label>
      </div>
        
      <div id="Wrapper">
        <label for="farmaplate15inch">Plate 15":</label>
        <input type="text" name="farmaplate15inch[]" >
        <label class="stock-label" for="FarmaPlate15">
                  
          <% if (allproducts && allproducts.length > 0) { %>

              <% const farma15inch5ft = allproducts.find(product => product.itemName === 'Farma plate 15"' && product.itemCategory === '3'); %>
              <% const farma15inch6ft = allproducts.find(product => product.itemName === 'Farma plate 15"' && product.itemCategory === '4'); %>
              <% const farma15inch9ft = allproducts.find(product => product.itemName === 'Farma plate 15"' && product.itemCategory === '5'); %>
              <% const farma15inch10ft = allproducts.find(product => product.itemName === 'Farma plate 15"' && product.itemCategory === '6'); %>
              <% if (farma15inch5ft) { %>
                  <span class="stock-number" id="farmaStock"><%= farma15inch5ft.workingQuantity %>/<%= farma15inch6ft.workingQuantity %>/<%= farma15inch9ft.workingQuantity %>/<%= farma15inch10ft.workingQuantity %></span>

              <% } else { %>
                  <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
              <% } %>
          <% } else { %>
              <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
          <% } %>

      </label>
      </div> 
      
      <div id="Wrapper"> 
        <label for="farmaplate18inch">Plate 18":</label>
        <input type="text" name="farmaplate18inch[]" >
        <label class="stock-label" for="FarmaPlate18">
                  
          <% if (allproducts && allproducts.length > 0) { %>

              <% const farma18inch5ft = allproducts.find(product => product.itemName === 'Farma plate 18"' && product.itemCategory === '3'); %>
              <% const farma18inch6ft = allproducts.find(product => product.itemName === 'Farma plate 18"' && product.itemCategory === '4'); %>
              <% const farma18inch9ft = allproducts.find(product => product.itemName === 'Farma plate 18"' && product.itemCategory === '5'); %>
              <% const farma18inch10ft = allproducts.find(product => product.itemName === 'Farma plate 18"' && product.itemCategory === '6'); %>
              <% if (farma18inch5ft) { %>
                  <span class="stock-number" id="farmaStock"><%= farma18inch5ft.workingQuantity %>/<%= farma18inch6ft.workingQuantity %>/<%= farma18inch9ft.workingQuantity %>/<%= farma18inch10ft.workingQuantity %></span>

              <% } else { %>
                  <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
              <% } %>
          <% } else { %>
              <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
          <% } %>

      </label>
      </div>
      
      <div id="Wrapper">
        <label for="farmaplate21inch">Plate 21":</label>
        <input type="text" name="farmaplate21inch[]" >
        <label class="stock-label" for="FarmaPlate21">
                  
          <% if (allproducts && allproducts.length > 0) { %>

              <% const farma21inch5ft = allproducts.find(product => product.itemName === 'Farma plate 21"' && product.itemCategory === '3'); %>
              <% const farma21inch6ft = allproducts.find(product => product.itemName === 'Farma plate 21"' && product.itemCategory === '4'); %>
              <% const farma21inch9ft = allproducts.find(product => product.itemName === 'Farma plate 21"' && product.itemCategory === '5'); %>
              <% const farma21inch10ft = allproducts.find(product => product.itemName === 'Farma plate 21"' && product.itemCategory === '6'); %>
              <% if (farma21inch5ft) { %>
                  <span class="stock-number" id="farmaStock"><%= farma21inch5ft.workingQuantity %>/<%= farma21inch6ft.workingQuantity %>/<%= farma21inch9ft.workingQuantity %>/<%= farma21inch10ft.workingQuantity %></span>

              <% } else { %>
                  <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
              <% } %>
          <% } else { %>
              <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
          <% } %>

      </label>
      </div> 
      
      <div id="Wrapper">         
        <label for="farmaplate24inch">Plate 24":</label>
        <input type="text" name="farmaplate24inch[]" >
        <label class="stock-label" for="FarmaPlate24">
        <% if (allproducts && allproducts.length > 0) { %>

          <% const farma24inch5ft = allproducts.find(product => product.itemName === 'Farma plate 24"' && product.itemCategory === '3'); %>
          <% const farma24inch6ft = allproducts.find(product => product.itemName === 'Farma plate 24"' && product.itemCategory === '4'); %>
          <% const farma24inch9ft = allproducts.find(product => product.itemName === 'Farma plate 24"' && product.itemCategory === '5'); %>
          <% const farma24inch10ft = allproducts.find(product => product.itemName === 'Farma plate 24"' && product.itemCategory === '6'); %>
          <% if (farma24inch5ft) { %>
              <span class="stock-number" id="farmaStock"><%= farma24inch5ft.workingQuantity %>/<%= farma24inch6ft.workingQuantity %>/<%= farma24inch9ft.workingQuantity %>/<%= farma24inch10ft.workingQuantity %></span>

          <% } else { %>
              <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
          <% } %>
      <% } else { %>
          <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
      <% } %>
      </label>
      </div> 
      
      <div id="Wrapper">         
        <label for="farmaplate27inch">Plate 27":</label>
        <input type="text" name="farmaplate27inch[]" >
        <label class="stock-label" for="FarmaPlate27">
                  
          <% if (allproducts && allproducts.length > 0) { %>

              <% const farma27inch5ft = allproducts.find(product => product.itemName === 'Farma plate 27"' && product.itemCategory === '3'); %>
              <% const farma27inch6ft = allproducts.find(product => product.itemName === 'Farma plate 27"' && product.itemCategory === '4'); %>
              <% const farma27inch9ft = allproducts.find(product => product.itemName === 'Farma plate 27"' && product.itemCategory === '5'); %>
              <% const farma27inch10ft = allproducts.find(product => product.itemName === 'Farma plate 27"' && product.itemCategory === '6'); %>
              <% if (farma27inch5ft) { %>
                  <span class="stock-number" id="farmaStock"><%= farma27inch5ft.workingQuantity %>/<%= farma27inch6ft.workingQuantity %>/<%= farma27inch9ft.workingQuantity %>/<%= farma27inch10ft.workingQuantity %></span>

              <% } else { %>
                  <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
              <% } %>
          <% } else { %>
              <span class="stock-number stock-number-na" id="farmaStock"></span> <!-- or any default value you want to display -->
          <% } %>

      </label>
      </div>

      
  </div>
</div>

<hr>
</div>































      <button type="button" id="toggle-form-button">Scaffolding Calculation</button>
      <div id="form-rowsss">
        <div class="form-rowss">
          <button type="button" onclick="addRoww()" class="add-buttonn">Add Row</button>
          <button type="button" onclick="deleteRoww()" class="delete-buttonn">Delete Last Row</button>
      
          <div id="linehorizontal" class="flex-container">

            <div id="Wrapper">
            <label for="length">Length:</label>
            <input type="text" name="length[]">
            </div>

            <div id="Wrapper">
            <label for="height">Height:</label>
            <input type="text" name="height[]">
            </div>

            <div id="Wrapper">
            <label for="datetimee">Date and Time:</label>
            <input type="datetime-local" id="datetimee" name="datetimee[]">
            </div>

            <div id="Wrapper">
            <label for="quantityscaffolding">Quantity:</label>
            <input type="number" name="quantityscaffolding[]" value="1">
            </div>
            
         <div id="Wrapper">
          <label for="breadthscaffolding">Breadth:</label>
          <input type="number" name="breadthscaffolding[]" value="3">
       </div>
        </div>


        <div id="linehorizontal" class="flex-container">

          <div id="Wrapper">
            <label for="ratemultipledayscaffolding">Rate (multiple days):</label>
            <input type="number" name="ratemultipledayscaffolding[]" id="ratemultipledayscaffolding">
          </div>
          <div id="Wrapper">
            <label for="numberofdaysscaffolding">No of Days:</label>
            <input type="number" name="numberofdaysscaffolding[]" id="numberofdaysscaffolding">
          </div>
          <div id="Wrapper">
            <label for="Rentafterdaysscaffolding">Rate (after days):</label>
            <input type="number" name="Rentafterdaysscaffolding[]" id="Rentafterdaysscaffolding" >
          </div>
          
          <script>
            document.addEventListener('DOMContentLoaded', function() {
  const rateMultipleDaysInput = document.getElementById('ratemultipledayscaffolding');
  const numberOfDaysInput = document.getElementById('numberofdaysscaffolding');
  const rentAfterDaysInput = document.getElementById('Rentafterdaysscaffolding');

  // Function to calculate and update the Rent after days field
  function updateRentAfterDays() {
    const rateMultipleDays = parseFloat(rateMultipleDaysInput.value);
    const numberOfDays = parseFloat(numberOfDaysInput.value);

    // Check if both inputs are numbers and numberOfDays is not zero
    if (!isNaN(rateMultipleDays) && !isNaN(numberOfDays) && numberOfDays !== 0) {
      const rentAfterDays = rateMultipleDays / numberOfDays;
      rentAfterDaysInput.value = rentAfterDays.toFixed(2); // Set the result with 2 decimal points
    } else {
      rentAfterDaysInput.value = ''; // Clear the field if inputs are invalid
    }
  }

  // Add event listeners to both input fields
  rateMultipleDaysInput.addEventListener('input', updateRentAfterDays);
  numberOfDaysInput.addEventListener('input', updateRentAfterDays);
});

          </script>
          <div id="options-container">
            
            <div id="checkbox-container">

              <div class="checkbox-row">
                <div class="checkbox-item">
                  <input type="checkbox" id="Labourup" name="Labourup[]" value="Labourup"  class="checkbox-input">
                  <label for="Labourup">Include Labour up</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="Labourdown" name="Labourdown[]" value="Labourdown" class="checkbox-input">
                  <label for="Labourdown">Include Labour down</label>
                </div>
              </div>
            
              <div class="checkbox-row">
                <div class="checkbox-item">
                  <input type="checkbox" id="Transportup" name="Transportup[]" value="Transportup" class="checkbox-input">
                  <label for="Transportup">Include Transport up</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="Transportdown" name="Transportdown[]" value="Transportdown" class="checkbox-input">
                  <label for="Transportdown">Include Transport down</label>
                </div>
              </div>
            
            </div>
            
          </div>
</div>


<div id="linehorizontal" class="flex-container">
       <div id="Wrapper">
        <label class="stock-label" for="Cuplock10ftscaffolding">
          <% if (allproducts && allproducts.length > 0) { %>
              <% const cuplockItem = allproducts.find(product => product.itemName === 'Cuplock 10ft'); %>
              <% if (cuplockItem) { %>
                  Cuplock 10ft: <span class="stock-number"><%= cuplockItem.workingQuantity %></span>
              <% } else { %>
                  Cuplock 10ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
              <% } %>
          <% } else { %>
              Cuplock 10ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
          <% } %>
      </label>
          <input type="number" name="Cuplock10ftscaffolding[]" >
       </div>
       <div id="Wrapper">
        <label class="stock-label" for="Cuplock5ftscaffolding">
          <% if (allproducts && allproducts.length > 0) { %>
              <% const cuplock5ftItem = allproducts.find(product => product.itemName === 'Cuplock 5ft'); %>
              <% if (cuplock5ftItem) { %>
                  Cuplock 5ft: <span class="stock-number"><%= cuplock5ftItem.workingQuantity %></span>
              <% } else { %>
                  Cuplock 5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
              <% } %>
          <% } else { %>
              Cuplock 5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
          <% } %>
      </label>
          <input type="number" name="Cuplock5ftscaffolding[]" >
          </div>
          <div id="Wrapper">
            <label class="stock-label" for="Ledger5ftscaffolding">
              <% if (allproducts && allproducts.length > 0) { %>
                  <% const ledger5ftItem = allproducts.find(product => product.itemName === 'Ledger 5ft'); %>
                  <% if (ledger5ftItem) { %>
                      Ledger 5ft: <span class="stock-number"><%= ledger5ftItem.workingQuantity %></span>
                  <% } else { %>
                      Ledger 5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                  <% } %>
              <% } else { %>
                  Ledger 5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
              <% } %>
          </label>
          
          <input type="number" name="ledger5ftscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="Ledger3ftscaffolding">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const ledger3ftItem = allproducts.find(product => product.itemName === 'Ledger 3ft'); %>
                <% if (ledger3ftItem) { %>
                    Ledger 3ft: <span class="stock-number"><%= ledger3ftItem.workingQuantity %></span>
                <% } else { %>
                    Ledger 3ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Ledger 3ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
        
          <input type="number" name="ledger3ftscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="Pin">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const pinItem = allproducts.find(product => product.itemName === 'Pin'); %>
                <% if (pinItem) { %>
                    Pin: <span class="stock-number"><%= pinItem.workingQuantity %></span>
                <% } else { %>
                    Pin: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Pin: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
          <input type="number" name="pinscaffolding[]" >
          </div>
        </div>

          <div id="linehorizontal" class="flex-container">
            <div id="Wrapper">
              <label class="stock-label" for="Cuplock8ftscaffolding">
                <% if (allproducts && allproducts.length > 0) { %>
                    <% const cuplock8ftItem = allproducts.find(product => product.itemName === 'Cuplock 8ft'); %>
                    <% if (cuplock8ftItem) { %>
                        Cuplock 8ft: <span class="stock-number"><%= cuplock8ftItem.workingQuantity %></span>
                    <% } else { %>
                        Cuplock 8ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                    <% } %>
                <% } else { %>
                    Cuplock 8ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            </label>
          <input type="number" name="Cuplock8ftscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="Ledger6.5ftscaffolding">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const ledger6_5ftItem = allproducts.find(product => product.itemName === 'ledger 6.5ft'); %>
                <% if (ledger6_5ftItem) { %>
                    Ledger 6.5ft: <span class="stock-number"><%= ledger6_5ftItem.workingQuantity %></span>
                <% } else { %>
                    Ledger 6.5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Ledger 6.5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
        
          <input type="number" name="ledger6.5ftscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="Wheel">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const wheelItem = allproducts.find(product => product.itemName === 'Wheel'); %>
                <% if (wheelItem) { %>
                    Wheel: <span class="stock-number"><%= wheelItem.workingQuantity %></span>
                <% } else { %>
                    Wheel: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Wheel: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
        
          <input type="number" name="wheelscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="WoodenChali">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const woodenChaliItem = allproducts.find(product => product.itemName === 'Woodern Chali'); %>
                <% if (woodenChaliItem) { %>
                    Wooden Chali: <span class="stock-number"><%= woodenChaliItem.workingQuantity %></span>
                <% } else { %>
                    Wooden Chali: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Wooden Chali: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
        
        
          <input type="number" name="Woodernchali[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="SteelChali">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const steelChaliItem = allproducts.find(product => product.itemName === 'Steel Chali'); %>
                <% if (steelChaliItem) { %>
                    Steel Chali: <span class="stock-number"><%= steelChaliItem.workingQuantity %></span>
                <% } else { %>
                    Steel Chali: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Steel Chali: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
          <input type="number" name="Steelchali[]" >
        </div>
       
        </div>
          <hr>
  
        </div>
      </div>































    <div class="header-container">
      <h1>General items</h1>
      <button type="button" class="add-more-button" onclick="addRow()"><i class="fa-solid fa-plus"></i> Add more</button>
    </div>
    
    
      <table>
        <thead>
          <tr>
            <th>#</th>
            <th>Date and Time</th>
            <th>Item Name</th>
            <th>Quantity</th>
            <th>Rent</th>
            <th>Amount</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="form-rows">
          <tr class="form-row">
            <td class="serial-number">1</td>
            <td><input type="datetime-local" name="datetime[]" ></td>
            <td>
              <input type="text" name="item[]"placeholder="SELECT ITEM" >
              <div class="autocomplete-dropdown"></div>
            </td>
            <td><input type="text" name="quantity[]"  placeholder="Quantity"></td>
            <td><input type="text" name="rent[]" placeholder="RATE"></td>
            <td><input type="text" name="amount[]" placeholder="TOTAL"></td> 
            <td><button type="button" class="delete-button" onclick="deleteRow(this)"><i class="fa-solid fa-trash-can"></i> </button></td>
  
          </tr>
        
        </tbody>

        <tbody id="Additionalcharges-section">
          <tr>
            <td colspan="4">
              <!-- Transport Dropdown (Only in the first row) -->
              <div id="transport-row">
                <select name="transport" id="transport-select" style="width: 100%; padding: 5px; border: 1px solid #ccc; border-radius: 4px;">
                  <option value="Self" selected>Self</option>
                  <% transport.forEach(transport => { %>
                    <option value="<%= transport.name %> - <%= transport.phoneNumber %><% if (transport.plateNumber) { %> - <%= transport.plateNumber %><% } %>">
                      <%= transport.name %> - <%= transport.phoneNumber %>
                      <% if (transport.plateNumber) { %> - <%= transport.plateNumber %><% } %>
                    </option>
                  <% }) %>
                </select>
              </div>
            </td>
            <td><input type="text" name="Additionalchargesname[]" placeholder="Enter Additional charges name"></td>
            <td><input type="text" name="AdditionalchargesAmount[]" placeholder="Additional charges Amount"></td>
            <td>
              <i class="fa-solid fa-plus" id="plus-icon" style="cursor: pointer;"></i>
            </td>
          </tr>
        </tbody>
        
        <script>
          document.addEventListener("DOMContentLoaded", function () {
            var plusIcon = document.getElementById("plus-icon");
        
            plusIcon.addEventListener("click", function () {
              var lastRow = document.querySelector("#Additionalcharges-section tr:last-child");
              var newRow = lastRow.cloneNode(true);
        
              // Clear input values in the cloned row and remove transport dropdown if present
              newRow.querySelectorAll("input").forEach(function (input) {
                input.value = "";
              });
        
              // Remove transport dropdown in cloned rows
              var transportDropdown = newRow.querySelector("#transport-row");
              if (transportDropdown) {
                transportDropdown.remove();
              }
        
              // Append the cloned row to the tbody
              document.getElementById("Additionalcharges-section").appendChild(newRow);
            });
          });
        </script>
        
        
<style>
#plus-icon {
  color: green;
  font-size: 30px;
  transition: all 0.3s ease; /* Transition effect with a duration of 0.3s and easing function 'ease' */
}

#plus-icon:hover {
  font-size: 38px; /* Adjust the size as needed */
}


</style>

        <tbody id="advance-section">
          <tr>
            <td colspan="4"></td>
            <td>Advance Amount:</td>
            <td><input type="text" name="AdvanceAmount" placeholder="Enter Advance Amount"></td>
            <td>
                <select name="modeofpayment">
                    <option value="cash">Cash</option>
                    <option value="paytm">pytm</option>
                    <option value="pending">pdng</option>
                </select>
            </td>
        </tr>
        
        </tbody>


      </table>
  
  
      <br><br>
  
    
      <input type="submit" value="Submit" id="submitButton">
    </form>




  </section>


  </div>
</main>

<script>
 document.getElementById("myForm").addEventListener("submit", function(event) {
    // Disable the submit button to prevent multiple clicks
    var submitButton = document.getElementById("submitButton");
    submitButton.disabled = true;
    
    // Change the text inside the button
    submitButton.value = "Form is being submitted ,, please wait.....";
  });
</script>























<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>




    <script>

      let rowCounter = 1; // Counter for unique IDs
  
      function handleAutocompleteInputEvent(itemInput, row) {
        itemInput.addEventListener("input", function () {
          handleAutocomplete(itemInput, row);
        });
      }
  
      document.addEventListener("DOMContentLoaded", function () {
        // Set default value for the initial row
        const firstDatetimeInput = document.querySelector('input[name="datetime[]"]');
        setDefaultDatetime(firstDatetimeInput);
  
        const firstItemInput = document.querySelector('input[name="item[]"]');
        const firstRow = document.querySelector('.form-row');
        handleAutocompleteInputEvent(firstItemInput, firstRow);
    });
  
      function addRow() {
        const formRows = document.getElementById('form-rows');
        const newRow = document.createElement('tr');
        newRow.className = 'form-row';
  
        // Get the current date and time
        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        const hours = String(currentDate.getHours()).padStart(2, '0');
        const minutes = String(currentDate.getMinutes()).padStart(2, '0');
  
        const currentDatetime = `${year}-${month}-${day}T${hours}:${minutes}`;
  
        newRow.innerHTML = `
          <td class="serial-number">${++rowCounter}</td>
          <td><input type="datetime-local" name="datetime[]" value="${currentDatetime}" required></td>
          <td>
            <input type="text" name="item[]" placeholder="SELECT ITEM" required>
            <div class="autocomplete-dropdown"></div>
          </td>
          <td><input type="text" name="quantity[]" required placeholder="Quantity"></td>
          <td><input type="text" name="rent[]" placeholder="RATE"></td>
          <td><input type="text" name="amount[]" placeholder="TOTAL"></td>
          <td><button type="button" class="delete-button" onclick="deleteRow(this)"><i class="fa-solid fa-trash-can"></i> </button></td>
        `;
        formRows.appendChild(newRow);
  
        // Update the new item input value
        const newItemInput = newRow.querySelector('input[name="item[]"]');
        handleAutocompleteInputEvent(newItemInput, newRow);



        const newRowRentInput = newRow.querySelector('input[name="rent[]"]');
    const newRowQuantityInput = newRow.querySelector('input[name="quantity[]"]');

    newRowRentInput.addEventListener("input", function () {
        updateAmount(newRow);
    });

    newRowQuantityInput.addEventListener("input", function () {
        updateAmount(newRow);
    });
      }
      
      function deleteRow(button) {
        const formRows = document.getElementById('form-rows');
        const rows = formRows.getElementsByClassName('form-row');
        const row = button.closest('.form-row');
        const serialNumberCell = row.querySelector('.serial-number');
        
        // Update the serial numbers after deleting a row
        for (let i = Array.from(rows).indexOf(row) + 1; i < rows.length; i++) {
          const serialNumberCell = rows[i].querySelector('.serial-number');
          serialNumberCell.textContent = i;
        }
  
        rowCounter--;
  
        formRows.removeChild(row);
      }
  
      function handleAutocomplete(autocompleteInput, row) {
    const autocompleteDropdown = row.querySelector('.autocomplete-dropdown');
    const rentInput = row.querySelector('input[name="rent[]"]');
    const amountInput = row.querySelector('input[name="amount[]"]');
    const quantityInput = row.querySelector('input[name="quantity[]"]');
  
    const inputValue = autocompleteInput.value.trim();
    if (inputValue === "") {
      autocompleteDropdown.innerHTML = "";
      rentInput.value = ""; // Clear rent if item name is empty
      amountInput.value = ""; // Clear amount if item name is empty
      return;
    }
  
    const timestamp = new Date().getTime();
    const url = `/itemname/${inputValue}?_=${timestamp}`;
  
    axios.get(url)
      .then(function (response) {
        const data = response.data;
        const autocompleteItems = data.map(item => `
          <div class="autocomplete-item">
            <span class="autocomplete-name">${item.itemName}</span>
            <span class="autocomplete-address">${item.totalQuantity ? `(${item.workingQuantity} in stock)` : '(No stock)'}</span>
            </div>`
        ).join("");
  
        autocompleteDropdown.innerHTML = autocompleteItems;
  
        const autocompleteItemElements = document.querySelectorAll(".autocomplete-item");
        autocompleteItemElements.forEach(itemElement => {
          itemElement.addEventListener("click", function () {
            const selecteditemName = itemElement.querySelector('.autocomplete-name').innerText;
            const selecteditem = data.find(client => client.itemName === selecteditemName);
  
            if (selecteditem) {
              autocompleteInput.value = selecteditem.itemName + (selecteditem.workingQuantity ? ` (${selecteditem.workingQuantity} in stock)` : '');
              rentInput.value = selecteditem.rentPrice;
              if (selecteditem.itemCategory == 1) {
      // Assuming you want to set quantity to 1 if itemCategory is 1
      quantityInput.value = 1;
    }
              amountInput.value = calculateAmount(row);
              autocompleteDropdown.innerHTML = "";
            } else {
              console.warn("Item not found for selected name:", selecteditemName);
            }
          });
        });
      })
      .catch(function (error) {
        console.error("Error fetching data:", error);
    });
  }
  
  
  function calculateAmount(row) {
    const quantity = parseFloat(row.querySelector('input[name="quantity[]"]').value) || 0;
    const rent = parseFloat(row.querySelector('input[name="rent[]"]').value) || 0;
    return (quantity * rent).toFixed(2);
}

  
      function setDefaultDatetime(datetimeInput) {
        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        const hours = String(currentDate.getHours()).padStart(2, '0');
        const minutes = String(currentDate.getMinutes()).padStart(2, '0');
  
        const currentDatetime = `${year}-${month}-${day}T${hours}:${minutes}`;
        datetimeInput.value = currentDatetime;
      }
  
      document.addEventListener("click", function (event) {
        const autocompleteInputs = document.querySelectorAll('input[name="item[]"]');
        const autocompleteDropdowns = document.querySelectorAll('.autocomplete-dropdown');
  
        for (let i = 0; i < autocompleteInputs.length; i++) {
          if (!autocompleteInputs[i].contains(event.target) && !autocompleteDropdowns[i].contains(event.target)) {
            autocompleteDropdowns[i].innerHTML = "";
          }
        }
      });
  
    
      document.addEventListener("DOMContentLoaded", function () {
    
    const rentInputs = document.querySelectorAll('input[name="rent[]"]');
    const quantityInputs = document.querySelectorAll('input[name="quantity[]"]');

    rentInputs.forEach(rentInput => {
        rentInput.addEventListener("input", function () {
            updateAmount(this.closest('.form-row'));
        });
    });

    quantityInputs.forEach(quantityInput => {
        quantityInput.addEventListener("input", function () {
            updateAmount(this.closest('.form-row'));
        });
    });
});
function updateAmount(row) {
    const quantity = parseFloat(row.querySelector('input[name="quantity[]"]').value) || 0;
    const rent = parseFloat(row.querySelector('input[name="rent[]"]').value) || 0;
    const amountInput = row.querySelector('input[name="amount[]"]');
    
    // Update the Amount field
    amountInput.value = (quantity * rent).toFixed(2);
}

  
$(document).ready(function () {
    $('input, select').keydown(function (e) {
      if (e.which === 38) { // Up arrow key
        e.preventDefault();
        navigateUpDown(this, 'prev');
      } else if (e.which === 40) { // Down arrow key
        e.preventDefault();
        navigateUpDown(this, 'next');
      } else if (e.which === 37) { // Left arrow key
        e.preventDefault();
        navigateLeftRight(this, 'prev');
      } else if (e.which === 39) { // Right arrow key
        e.preventDefault();
        navigateLeftRight(this, 'next');
    }
    });
  });

  function navigateUpDown(element, direction) {
    const targetElement = $(element)[direction]();
    if (targetElement.length > 0) {
      targetElement.focus();
    }
  }

  function navigateLeftRight(element, direction) {
      const targetElement = $(element).closest('td')[direction]().find('input, select');
    if (targetElement.length > 0) {
      targetElement.focus();
    }
  }
  
 
  document.addEventListener('DOMContentLoaded', function () {
    // Get the current date and time in the format expected by datetime-local input
    function getCurrentDateTime() {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
    
        return `${year}-${month}-${day}T${hours}:${minutes}`;
    }
    
    // Set the current date and time to the input field
    const datetimeInput = document.getElementById('datetimereceipt');
    datetimeInput.value = getCurrentDateTime();
    });
    
    




    document.addEventListener("DOMContentLoaded", function () {
      const inp = document.querySelector("#inputusername");
      console.log(inp);
      const dropdown = document.getElementById("autocompleteDropdown");
      const inputAddress = document.getElementById("inputAddress");
      const inputPhone = document.getElementById("inputPhone");
      const inputcomment = document.getElementById("inputcomment");
  let selectedUserId = null;
      inp.addEventListener("input", function () {
        const inputValue = inp.value.trim();
        if (inputValue === "") {
          dropdown.innerHTML = "";
          inputAddress.value = "";
          inputPhone.value = "";
          inputcomment.value = "";
          return;
        }

        const timestamp = new Date().getTime();
        const url = `/username/${inputValue}?_=${timestamp}`;

        axios.get(url)
          .then(function (response) {
            const data = response.data;
            console.log(data);
            const autocompleteItems = data.map(item => `
              <div class="autocomplete-item">
                <span class="autocomplete-name">${item.clientName}</span>
                <span class="autocomplete-address">${item.address || 'No address'}</span>
              </div>`
            ).join("");

            dropdown.innerHTML = autocompleteItems;

            const autocompleteItemElements = document.querySelectorAll(".autocomplete-item");
            autocompleteItemElements.forEach(item => {
              item.addEventListener("click", function () {
                const selectedClientName = item.querySelector('.autocomplete-name').innerText;
            const selectedClientAddress = item.querySelector('.autocomplete-address').innerText;
            const selectedClient = data.find(client => client.clientName === selectedClientName && client.address === selectedClientAddress);
  
  if (selectedClient) {
    inp.value = selectedClient.clientName;
    inputAddress.value = selectedClient.address || "";
    inputPhone.value = selectedClient.phone || "";
    inputcomment.value = selectedClient.comment || "";
     selectedUserId = selectedClient._id; // Store the selected user's ID
    console.log("Updated values:", inputAddress.value, inputPhone.value, inputcomment.value, selectedUserId);
    dropdown.innerHTML = "";

    const count = selectedClient.receiptinit ? selectedClient.receiptinit.length : 0;
              receiptInitCountBox.innerText = count;
  } else {
    console.warn("Client not found for selected name:", selectedClientName);
}
});

            });
          })
          .catch(function (error) {
            console.error("Error fetching data:", error);
          });
       receiptInitCountBox.addEventListener("click", function () {
        if (selectedUserId) {
  window.open(`/lastallaccount/${selectedUserId}`, '_blank');
} else {
  alert("Please select a user first.");
}

  });
});

      inp.addEventListener("keydown", function (event) {
        const autocompleteItemElements = document.querySelectorAll(".autocomplete-item");
        if (event.key === "ArrowDown" && autocompleteItemElements.length > 0) {
          autocompleteItemElements[0].focus();
        } else if (event.key === "ArrowUp" && autocompleteItemElements.length > 0) {
            autocompleteItemElements[autocompleteItemElements.length - 1].focus();
        }
      });

      document.addEventListener("click", function (event) {
        if (!inp.contains(event.target) && !dropdown.contains(event.target)) {
          dropdown.innerHTML = "";
        }
      });
    });

    


    </script>
    


    <script>
    
        $(document).ready(function() {
          // Function to toggle the visibility of the form
          function toggleForm() {
            $("#form-rowsss").slideToggle();
          }
    
          // Attach click event to the button
          $("#toggle-form-button").click(toggleForm);
        });
    
    
        function getCurrenttDateTime() {
              const now = new Date();
              const year = now.getFullYear();
              const month = (now.getMonth() + 1).toString().padStart(2, '0');
              const day = now.getDate().toString().padStart(2, '0');
              const hours = now.getHours().toString().padStart(2, '0');
              const minutes = now.getMinutes().toString().padStart(2, '0');
              const dateTimeString = `${year}-${month}-${day}T${hours}:${minutes}`;
              return dateTimeString;
            }
        
            document.getElementById('datetimee').value = getCurrenttDateTime();
    
    


    
    </script>

    
    <style>
    
    .delete-button {
    
    color: #ffffff; 
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    
    transition: transform 0.3s ease;
    }
    
    .delete-button i {
    /* Style the icon */
    color: #000000; /* Set the icon color */
    margin-right: 5px;
    transform: scale(1.3);
    transition-delay: 0.5s;
    color: red;
    }



    .delete-button:hover {
  
        
    transform: scale(1.6);
    
    }
    
    
    
    .autocomplete-dropdown {
    position: absolute;
    width: 200px; /* Set a fixed width for the dropdown */
    max-height: 150px;
    overflow-y: auto;
    border: 1px solid #dddddd; /* Match the border style of table cells */
    background-color: #ffffff; /* Set the background color to white */
    z-index: 1; /* Ensure the dropdown appears above other elements */
    }
    
    
    
    .autocomplete-dropdownn {
    position: absolute;
    width: 200px; /* Set a fixed width for the dropdown */
    max-height: 150px;
    overflow-y: auto;
    border: 1px solid #dddddd; /* Match the border style of table cells */
    background-color: #ffffff; /* Set the background color to white */
    z-index: 1; /* Ensure the dropdown appears above other elements */
    }
    
    .form-row {
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 15px;
    overflow: hidden;
    background-color: #f5f5f5;
    transition: box-shadow 0.3s ease;
    width: 110%;
    margin: 20px;
    }
    
    /* Style the serial number column */
    .serial-number {
    font-weight: bold;
    padding: 10px;
    border-right: 1px solid #ddd;
    background-color: #e0e0e0;
    }
    
    /* Style the input fields */
    input[type="datetime-local"],
    input[type="text"] {
    width: 100%;
    padding: 12px;
    margin: 5px 0;
    box-sizing: border-box;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-family: 'Arial', sans-serif;
    }
    
    /* Style the autocomplete dropdown */
    .autocomplete-dropdown {
    width: 30%;
    }
    
    .autocomplete-dropdownn{
    width: 100%;
    }
    
    
    
    /* Style the delete button */
    
    
    /* Add some margin to the delete button */
    .delete-button {
    margin-top: 2px;
    }
    
    /* Style the table row on hover for better UX */
    .form-row:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    
    
    
    
    
    /* Center the submit button */
    
    
    
    
    
    .add-more-button {
    padding: 10px;
    margin: 20px; 
    }
    
    
    table {
    width: 99%;
    border-collapse: collapse;
    margin: 10px;
    }
    th, td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
    }
    
    th:nth-child(2),
    td:nth-child(2) {
    width: 20%; /* You can adjust this value as needed */
    }
    
    th:nth-child(6),
    td:nth-child(6) {
    width: 15%; /* You can adjust this value as needed */
    }
    
    th:nth-child(7),
    td:nth-child(7) {
    width: 10%; /* You can adjust this value as needed */
    }
    /* Adjust the width of the Item Name column */
    th:nth-child(3),
    td:nth-child(3) {
    width: 25%; /* You can adjust this value as needed */
    }
    
    th:nth-child(4),
    td:nth-child(4),
    th:nth-child(5),
    td:nth-child(5) {
    width: 14%; 
    }
    
    h1 {
    color: #333; /* Set your desired text color */
    font-family: 'Arial', sans-serif; /* Set your desired font family */
    font-size: 24px; /* Set your desired font size */
    margin: 20px; /* Set your desired margin */
    
    }
    
    .header-container h1,
    .header-container button {
    display: inline-block; /* or 'inline' depending on your styling requirements */
    vertical-align: middle; /* Align elements vertically */
    margin: 5; /* Remove default margins */
    }
    
    
    input[type="submit"] {
    
    color: rgb(0, 0, 0);
    padding: 15px 32px;
    text-align: center;
    width: 160vh; /* Adjusted width */
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 10px;
    cursor: pointer;
    border: 1px solid #000000;
    border-radius: 10px;
    
}











#toggle-form-button {
          padding: 10px 15px;
          background-color: #3498db;
          color: #fff;
          border: none;
          border-radius: 5px;
          cursor: pointer;
          margin: 12px;
          width: 200px;
        }
    
        #toggle-form-button:hover {
          background-color: #2980b9;
        }
    
    
    
        button {
        border: none;
        outline: none;
        cursor: pointer;
    }
    
    .add-buttonn,
    .delete-buttonn {
        font-size: 14px;
        border-radius: 5px;
        transition: background-color 0.3s ease, color 0.3s ease;
        margin: 10px;
    }
    
    .add-buttonn {
        background-color: #4CAF50;
        color: white;
        padding: 12px 24px;
        margin-right: 10px;
    }
    
    .add-buttonn:hover {
        background-color: #45a049;
    }
    
    .delete-buttonn {
        background-color: #f44336;
        color: white;
        padding: 12px 24px;
    }
    
    .delete-buttonn:hover {
        background-color: #d32f2f;
    }
    
    
    
    #linehorizontal {
        display: flex;
        align-items: center; /* Align items vertically at the center */
    }
    
    #linehorizontal label {
        margin-right: 10px; /* Adjust spacing between label and input */
    }
    
    
    
    #Wrapper {
          margin: 5px;
          padding: 15px;
          border-radius: 8px;    
        }
    
        label {
          display: block;
          margin-bottom: 10px;
          font-weight: bold;
          color: #333;
        }
    
        input {
          padding: 10px;
          border: 1px solid #303030;
          border-radius: 5px;
          width: 100%;
          box-sizing: border-box; /* Include padding in the total width */
          transition: border-color 0.3s ease;
        }
    
        input:focus {
          border-color: #007bff;
        }
    
        .checkbox-item {
            display: flex;
            align-items: center;
        }
    
        
    
        
        #checkbox-container {
      display: flex;
      flex-wrap: wrap;
    }
    
    .checkbox-row {
      flex: 1;
      max-width: 43%; 
      box-sizing: border-box;
      margin: 0.5px;
    }
    .checkbox-input {
      margin-right: 3px; /* Adjust the margin between checkbox input and label as needed */
      transform: scale(1.3); /* Adjust the scale factor as needed */
    }
    
    #form-rowsss {
          display: none; /* Initially hide the form */
        }
    
    
        hr {
        border: 2px solid #a09d9d; /* Set the border color and style */
        margin: 20px 0; /* Set margin for spacing */
      } 
    
        .stock-label {
            font-size: 15px;
            color: #333; /* Dark gray color */
            margin-bottom: 5px;
        }
    
        .stock-number {
            display: inline-block;
            padding: 5px 10px;
            color: #000000; /* Black text color */
            font-weight: bold;
            border-radius: 5px;
            border: 2px solid #2E8B57; /* Darker green border */
        }
    </style>




<script>
   
   
   
    let rowwCounter = 1;
 
  function addRoww() {
           const formRows = document.getElementById('form-rowsss');
           const newRow = document.createElement('div');
           newRow.className = 'form-rowss';
           newRow.innerHTML = `
           
           <div id="linehorizontal" class="flex-container">
 
             <div id="Wrapper">
             <label for="length">Length:</label>
             <input type="text" name="length[]" >
             </div>
 
             <div id="Wrapper">
             <label for="height">Height:</label>
             <input type="text" name="height[]">
             </div>
 
              <div id="Wrapper">
             <label for="datetimee">Date and Time:</label>
             <input type="datetime-local" id="datetimee[]" name="datetimee[]" >
             </div>
 
             <div id="Wrapper">
             <label for="quantityscaffolding">Quantity:</label>
             <input type="text" name="quantityscaffolding[]" value="1">
             </div>
 
             <div id="Wrapper">
               <label for="breadthscaffolding">Breadth:</label>
               <input type="text" name="breadthscaffolding[]" value="3">
             </div>
 
             </div>
             <div id="linehorizontal" class="flex-container">
               <div id="Wrapper">
               <label for="ratemultipledayscaffolding">Rate (multiple days):</label>
               <input type="number" name="ratemultipledayscaffolding[]" >
               </div>
 
             <div id="Wrapper">
             <label for="numberofdaysscaffolding">No of Days:</label>
             <input type="number" name="numberofdaysscaffolding[]" >
             </div>
 
             <div id="Wrapper">
             <label for="Rentafterdaysscaffolding">Rate (after days):</label>
             <input type="number" name="Rentafterdaysscaffolding[]" >
             </div>
 
             <div id="options-container">
     <div id="checkbox-container">
 
         <div class="checkbox-row">
             <div class="checkbox-item">
                 <input type="checkbox" id="Labourup${rowCounter}" name="Labourup[]" value="Labourup" checked class="checkbox-input">
                 <label for="Labourup${rowCounter}" class="checkbox-label">Include Labour up</label>
             </div>
             <div class="checkbox-item">
                 <input type="checkbox" id="Labourdown${rowCounter}" name="Labourdown[]" value="Labourdown" checked class="checkbox-input">
                 <label for="Labourdown${rowCounter}" class="checkbox-label">Include Labour down</label>
             </div>
         </div>
 
         <div class="checkbox-row">
             <div class="checkbox-item">
                 <input type="checkbox" id="Transportup${rowCounter}" name="Transportup[]" value="Transportup" checked class="checkbox-input">
                 <label for="Transportup${rowCounter}" class="checkbox-label">Include Transport up</label>
             </div>
             <div class="checkbox-item">
                 <input type="checkbox" id="Transportdown${rowCounter}" name="Transportdown[]" value="Transportdown" checked class="checkbox-input">
                 <label for="Transportdown${rowCounter}" class="checkbox-label">Include Transport down</label>
             </div>
         </div>
 
     </div>
 </div>
 
 </div>
 
             </div>
 
 
             
 <div id="linehorizontal" class="flex-container">
 <div id="Wrapper">
             <label for="Cuplock10ftscaffolding">Cuplock 10ft:</label>
             <input type="number" name="Cuplock10ftscaffolding[]" >
             </div><div id="Wrapper">
             <label for="Cuplock5ftscaffolding">Cuplock 5ft:</label>
             <input type="number"" name="Cuplock5ftscaffolding[]" >
           </div><div id="Wrapper">
             <label for="ledger5ftscaffolding">ledger 5ft:</label>
             <input type="number" name="ledger5ftscaffolding[]" >
           </div><div id="Wrapper">
             <label for="ledger3ftscaffolding">ledger 3ft:</label>
             <input type="number" name="ledger3ftscaffolding[]" >
           </div><div id="Wrapper">
             <label for="pinscaffolding">Pin:</label>
             <input type="number" name="pinscaffolding[]" >
           </div></div>
                       
 <div id="linehorizontal" class="flex-container">
 <div id="Wrapper">
             <label for="Cuplock8ftscaffolding">Cuplock 8ft:</label>
             <input type="number" name="Cuplock8ftscaffolding[]" >
             </div><div id="Wrapper">
             <label for="ledger6.5ftscaffolding">ledger 6.5ft:</label>
             <input type="number" name="ledger6.5ftscaffolding[]" >
             </div><div id="Wrapper">
             <label for="wheelscaffolding">Wheel:</label>
             <input type="number" name="wheelscaffolding[]">
           </div><div id="Wrapper">
             <label for="Woodernchali">Woodern chali:</label>
             <input type="number" name="Woodernchali[]" >
           </div><div id="Wrapper">
             <label for="Steelchali">Steel chali:</label>
             <input type="number" name="Steelchali[]" >
           </div></div>
             <hr>
           `;
           formRows.appendChild(newRow);
     
           const newDatetimeInput = newRow.querySelector(`input[type="datetime-local"]`);
           newDatetimeInput.value = getCurrentDateTime();
     
           rowwCounter++; 
         }
 
 
 
         function deleteRoww() {
           const formRows = document.getElementById('form-rowsss');
           const rows = formRows.getElementsByClassName('form-rowss');
           if (rows.length > 1) {
             formRows.removeChild(rows[rows.length - 1]);
           }
         }
     
 function calculateAmountt(input) {
           const row = input.closest('.form-rowss');
           const heightInput = row.querySelector('#Wrapper input[name="height[]"]');
           const lengthInput = row.querySelector('input[name="length[]"]');
           const Cuplock10ftInput = row.querySelector('input[name="Cuplock10ftscaffolding[]"]');
           const Cuplock5ftInput = row.querySelector('input[name="Cuplock5ftscaffolding[]"]');
           const ledger5ftInput = row.querySelector('input[name="ledger5ftscaffolding[]"]');
           const ledger3ftInput = row.querySelector('input[name="ledger3ftscaffolding[]"]');
           const pinInput = row.querySelector('input[name="pinscaffolding[]"]');
     
           // Check if both height and length inputs have values
           if (heightInput.value && lengthInput.value) {
             const height = parseFloat(heightInput.value);
             const length = parseFloat(lengthInput.value);
     
             var lastDigit = length % 10;
             var lastDigit2 = parseFloat(height) - 5;
     
             let cuplock10ft, cuplock5ft, ledger5ft, ledger3ft, pin;
     
             if (length % 5 == 0 && height % 5 == 0) {
               if (height % 10 == 0) 
               {
                 cuplock10ft = (((parseFloat(length) / 5) + 1) * 2) * (height / 10);
                 pin = (((parseFloat(length) / 5) + 1) * 2) * ((height / 10) - 1);
                 console.log(1);
               } 
              
               else if (height % 5 == 0 && height % 10 !== 0) 
               {
                 cuplock10ft = (((parseFloat(length) / 5) + 1) * 2) * ((height-5) / 10);
                 cuplock5ft = (((parseFloat(length) / 5) + 1) * 2);
               }
               ledger5ft = ((parseFloat(length) / 5) * 4) * (height / 10);
               ledger3ft = (((parseFloat(length) / 5) * 2) * (height / 10)) + ((height / 10) * 2);
             }   
             else if ((lastDigit == 3 || lastDigit == 8) && height % 5 == 0) {
               if (height % 10 == 0) {
                 cuplock10ft = ((((parseFloat(length) + 2) / 5) + 1) * 2) * (height / 10);
                 pin = (((parseFloat(length) / 5) + 1) * 2) * ((height - 10) / 10);
               } 
              
               else if (height % 5 == 0 && height % 10 !== 0)
               {
                 cuplock10ft = ((((parseFloat(length) + 2) / 5) + 1) * 2) * ((height - 5) / 10);
                 pin = cuplock10ft;
                 cuplock5ft = ((((parseFloat(length) + 2) / 5) + 1) * 2);
               }
               ledger5ft = (((parseFloat(length) - 3) / 5) * 4) * (height / 10);
               var diffe = ((((parseFloat(length) + 2)) / 5) * 4) * (height / 10) - ledger5ft;
               ledger3ft = ((((parseFloat(length) - 3) / 5) * 2) * (height / 10)) + ((height / 10) * 2) + ((height / 10) * 6);
             } 
             else if (length % 6.5 == 0 && length !== 65) {
               cuplock10ft = (((parseFloat(length) / 6.5) + 1) * 2) * (lastDigit2 / 10);
             }
     
             Cuplock10ftInput.value = isNaN(cuplock10ft) ? '' : cuplock10ft;
     Cuplock5ftInput.value = isNaN(cuplock5ft) ? '' : cuplock5ft;
     ledger5ftInput.value = isNaN(ledger5ft) ? '' : ledger5ft;
     ledger3ftInput.value = isNaN(ledger3ft) ? '' : ledger3ft;
     pinInput.value = isNaN(pin) ? '' : pin;
   }
    else {
    
     Cuplock10ftInput.value = '';
     Cuplock5ftInput.value = '';
     ledger5ftInput.value = '';
     ledger3ftInput.value = '';
     pinInput.value = '';
   }
 }
 
 document.addEventListener('input', function(event) {
           const target = event.target;
           if (target.tagName.toLowerCase() === 'input' && target.type === 'text') {
             calculateAmountt(target);
           }
         });
 
 
 </script>

    

<script>

            
    function getCurrentDateTime() {
      const now = new Date();
      const year = now.getFullYear();
      const month = (now.getMonth() + 1).toString().padStart(2, '0');
      const day = now.getDate().toString().padStart(2, '0');
      const hours = now.getHours().toString().padStart(2, '0');
      const minutes = now.getMinutes().toString().padStart(2, '0');
      const dateTimeString = `${year}-${month}-${day}T${hours}:${minutes}`;
      return dateTimeString;
    }
    
    document.getElementById('datetimefarma').value = getCurrentDateTime();
            </script>
  










      <%- include('nav bar/navbardown.ejs') %>