
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            @media print {
              .print-hidden {
                display: none;
              }
            }
            
            .print-button {
              background-color: #4CAF50; /* Green */
              border: none;
              color: white;
              padding: 15px 32px;
              text-align: center;
              text-decoration: none;
              display: inline-block;
              font-size: 16px;
              margin: 4px 2px;
              cursor: pointer;
            }
          </style>
          
          <button onclick="window.print()" class="print-hidden" id="print-button">Print</button>
          <button onclick="window.location.href='/ttreceiptall'" class="print-hidden" id="receipt-button">All receipt</button>
          <button onclick="window.location.href='/receipt1234'" class="print-hidden" id="receipt-button">Create New receipt</button>
        
           
          
          <script>
            // Automatically trigger the print function when the page loads
            window.onload = function() {
              document.getElementById('print-button').click();
            };
          </script>
        <style>
            body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
        }
        img {
            width: 70px;
            height: auto; 
        }
        .receipt {
            border: 1px solid #1f1f1f;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            font-size: 28px;
            margin-bottom: 20px;
            margin-top: 10px;
        }

     

        .info {
            margin-bottom: 20px;
            display: flex;
            font-size: 20px;
        }
        .serialinfo {
          margin-left: 240px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #000000;
            padding: 10px;
            text-align: left;
            font-size: 20px;
        }

       

        .total {
            margin-top: 20px;
            text-align: right;
            font-weight: bold;
            font-size: 20px;
        }
        @media print {
            button {
                display: none;
            }
        }
    </style>
    <title>Construction Material Rental Receipt</title>
</head>
<body>

    <div class="receipt">
        
        <div class="header1">
            <div>
                GST NO : 06CTDPS6100F1ZY <br>
                ORIGINAL COPY
            </div>
            <div class="tax-invoice">
                TAX INVOICE
            </div>
            <div class="logo-container">
                <img src="/images/TT-remove.png" alt="Logo">
            </div>
        </div>
        <div class="headerr">
            T.T. CONSTRUCTION
            <div class="scaffolding">
                SCAFFOLDING AND FORMWORK SYSTEM
            </div>
            
        </div>
        
        <style>
               /* Main header container */
    .header1 {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative; /* Allows absolute positioning of the center element */
    }

    /* GST and ORIGINAL COPY */
    .header1 > div:first-child {
        flex-shrink: 0; /* Prevent resizing */
    }

    /* Centered TAX INVOICE */
    .tax-invoice {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        font-size: 24px;
        font-weight: bold;
        text-decoration: underline;
        white-space: nowrap; /* Prevents wrapping to a new line */
    }

    /* Logo Container */
    .logo-container {
        flex-shrink: 0; /* Prevent resizing of the logo container */
    }

    .logo-container img {
        width: 100px;
        height: auto;
    }
        
            .headerr {
                font-size: 34px;
                font-weight: bold;
                
             
            }
            .scaffolding {
      /* Set the desired maximum width */
       /* Centers the text horizontally */
        font-size: 18px; /* Adjust font size if needed */
         /* Center-aligns the text inside the div */
        word-wrap: break-word; /* Ensures long words break to fit within the width */
    }
        </style>
        
        <hr>
        
        <div class="address">
          J-324 ADARSH COLONY, OPP. HANUMAN MANDIR , N.I.T FARIDABAD <br>
          T. 9971238816 , 9315792003
        </div>
        <hr>
        <div class="info">
            <% if (receiptEdit.receiptclientsitename) { %>
                <div>
                    <p>Customer's Name: <%= receiptEdit.receiptclientname.clientName %> / <%= receiptEdit.receiptclientsitename.clientNamesite %></p>
                    <p>Phone no: <%= receiptEdit.receiptclientname.phone %> / <%= receiptEdit.receiptclientsitename.phonesite %></p>
                    <p>Address: <%= receiptEdit.receiptclientname.address %> / <%= receiptEdit.receiptclientsitename.addresssite %></p>
                </div>
            <% } else { %>
                <div>
                    <p>Billed to : </p>
                    <p>Customer's Name: <%= receiptEdit.receiptclientname.clientName %></p>
                    <p>Phone no: <%= receiptEdit.receiptclientname.phone %></p>
                    <p>Address: <%= receiptEdit.receiptclientname.address %></p>
                    <P>GST : <%= receiptEdit.receiptclientname.dontknow %></P>
                </div>
            <% } %>
            <style>
                .info p {
                    margin: 5px 0; /* Adjusts the gap between lines */
                    line-height: 1.2; /* Adjusts the space between lines within a paragraph */
                }
                
            </style>
            <div class="serialinfo">
                <p>
                    Bill no: 
                    <strong id="serial-no" contenteditable="true" style="cursor: pointer; outline: none;" onclick="enableEditMode()">GST/<%= receiptEdit.receiptChallannumber %></strong>
                  </p>
                  
                  <script>
                    function enableEditMode() {
                      const serialNoElement = document.getElementById("serial-no");
                  
                      // Save the original value to restore if needed
                      const originalValue = serialNoElement.innerText;
                  
                      // Add a listener to detect when editing is complete (on blur)
                      serialNoElement.addEventListener("blur", function () {
                        const updatedValue = serialNoElement.innerText.trim();
                  
                        // Validate the updated value (example: ensure it starts with GST/)
                        if (!updatedValue.startsWith("GST/")) {
                          alert("Serial number must start with 'GST/'.");
                          serialNoElement.innerText = originalValue; // Restore original value
                        }
                      });
                    }
                  </script>
                  
                <p>Bill Date:
                    <% 
                      // Get the current date
                      const today = new Date();
                  
                      // Define the formatting options
                      const options = { weekday: 'short', year: 'numeric', month: 'short', day: '2-digit' };
                  
                      // Format today's date
                      const formattedDate = today.toLocaleDateString('en-US', options);
                    %>
                    <%= formattedDate %>
                  </p>
              
              
              
              </div>
        </div>

        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Item Name</th>
                    <th>Start date</th>
                    <th>End date</th>
                    <th>Total days</th> 
                    <th>Quantity</th> 
                    <th>Rate</th> 
                    <th>Total</th>
                  </tr>
                  <% var final = 0; %>
            </thead>
            <tbody id="form-rows">
              <% let b = 1 %>
              <% receiptEdit.generalitemreceipt.forEach(item => { %>
                  <% let totalin = 0; %>
                  <% item.onngoing.forEach(itemm => { %>
                      <% totalin += parseInt(itemm.quantity, 10); %> 
                  <% }); %>
              
                  <% if (totalin == 0) { %>
                      <tr>
                          <td>
                              <%= b %><% b++ %>
                          </td>
                          <td>
                              <%= item.itemoutname %>
                          </td>
                          <td>
                            <%
                              // Format and set time components to 00:00:00 for the given date
                              const dateString1 = item.Dateandtime;
                              const dateObject1 = new Date(dateString1);
                              dateObject1.setUTCHours(0, 0, 0, 0);
                          
                              const formattedDateTime = dateObject1.toLocaleString('en-GB', {
                                timeZone: 'UTC',
                                day: 'numeric',
                                month: 'numeric',
                                year: 'numeric',
                                
                                hour12: false
                              });
                            %>
                            <%= formattedDateTime %>
                          </td>
                         
                              <td>
                                <%
                                  // Get the current date in IST
                                  const currentDate = new Date();
                                  const formattedDate = currentDate.toLocaleString('en-GB', {
                                    timeZone: 'Asia/Kolkata', // Set the timeZone to 'Asia/Kolkata' for IST
                                    day: 'numeric',
                                    month: 'numeric',
                                    year: 'numeric',
                                    hour12: false
                                  });
                                %>
                                <span style="color: red;">
                                  <%= formattedDate %>
                                </span>
                              </td>
                           
                          
                          <td>
                            <%
                              // Calculate the difference between the current date and the given date in milliseconds
                              const dateObject2 = new Date(dateString1);
                              dateObject2.setUTCHours(0, 0, 0, 0);
                          
                              const istOffset = 5.5 * 60 * 60 * 1000; // IST is UTC+5:30
                              const currentDateMilliseconds = currentDate.getTime() + istOffset;
                              const dateObject2Milliseconds = dateObject2.getTime();
                              const millisecondsDifference = currentDateMilliseconds - dateObject2Milliseconds;
                          
                              let daysDifference = Math.floor(millisecondsDifference / (24 * 60 * 60 * 1000));
                              let hoursDifference = Math.floor((millisecondsDifference % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
                              let minutesDifference = Math.floor((millisecondsDifference % (60 * 60 * 1000)) / (60 * 1000));
                              let secondsDifference = Math.floor((millisecondsDifference % (60 * 1000)) / 1000);
                          
                              // Adjust the differences to be within the correct range
                              if (secondsDifference >= 60) {
                                minutesDifference += Math.floor(secondsDifference / 60);
                                secondsDifference %= 60;
                              }
                          
                              if (minutesDifference >= 60) {
                                hoursDifference += Math.floor(minutesDifference / 60);
                                minutesDifference %= 60;
                              }
                          
                              if (hoursDifference >= 24) {
                                daysDifference += Math.floor(hoursDifference / 24);
                                hoursDifference %= 24;
                              }
                            %>
                            <%= daysDifference+1 %> days
                          </td>
                          <td>
                            <%= item.Quantity %>
                          </td>
                          <td>
                            <%= item.rent %>
                          </td>
                          <td>
                            
                            <% var bb =  item.Quantity * item.rent * (daysDifference+1) %>
    <%= bb %>
    <% final += bb; %>
                          </td>
                          
                          
                          
                          
                          
                          
                          
                          
                          
    
    
    
                      </tr>
                  <% } else if (totalin > 0) { %>
                    <% 
                      var checkno;
                      if (totalin == item.Quantity) {
                        checkno = item.onngoing.length;
                      } else {
                        checkno = item.onngoing.length + 1;
                      }  
                    %>
                    <% var workingquantity = item.Quantity %>
                    <% for (var i = 0; i< checkno; i++) { %>            
                    <tr>
                      <% if (i < item.onngoing.length) { %>
                        <% item.onngoing[i].quantity %>
                      <% } else { %>
                        
                      <% } %>
                      <td>
                        <%= b %><% b++ %>
                      </td>
                      <td>
                        <%= item.itemoutname %>
                      </td>
                      <%
                      let formattedDateTime, formattedDate;
                    
                      // Calculate the start date string based on the condition
                      let startDateStr;
                      if (i == 0) {
                        startDateStr = item.Dateandtime;
                      } else {
                        // Get the previous return date and add one day to it
                        const prevReturnDateStr = item.onngoing[i - 1].returndateAt;
                        const prevReturnDate = new Date(prevReturnDateStr);
                        prevReturnDate.setDate(prevReturnDate.getDate() + 1); // Add one day
                        startDateStr = prevReturnDate.toISOString(); // Convert back to string
                      }
                    
                      const startDate = new Date(startDateStr);
                      startDate.setUTCHours(0, 0, 0, 0);
                    
                      formattedDateTime = startDate.toLocaleString('en-GB', {
                        timeZone: 'UTC',
                        day: 'numeric',
                        month: 'numeric',
                        year: 'numeric',
                        hour12: false
                      });
                    
                      // Determine the end date or the current date
                      if (item.onngoing && item.onngoing[i] && item.onngoing[i].returndateAt) {
                        const endDateStr = item.onngoing[i].returndateAt;
                        const endDate = new Date(endDateStr);
                        
                        formattedDate = endDate;
                      } else {
                        formattedDate = new Date();
                      }
                    
                      // Function to calculate the time difference
                      function calculateTimeDifference(startDate, endDate) {
                        const millisecondsDifference = endDate.getTime() - startDate.getTime();
                        
                        const days = Math.floor(millisecondsDifference / (24 * 60 * 60 * 1000));
                        const hours = Math.floor((millisecondsDifference % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
                        const minutes = Math.floor((millisecondsDifference % (60 * 60 * 1000)) / (60 * 1000));
                        const seconds = Math.floor((millisecondsDifference % (60 * 1000)) / 1000);
                        
                        return { days, hours, minutes, seconds };
                      }
                    
                      // Use formattedDate for the end date in the calculation
                      const { days, hours, minutes, seconds } = calculateTimeDifference(startDate, formattedDate);
                    %>
                    
                    <!-- Display the results in the table -->
                    <td><%= formattedDateTime %></td>
                    <td><%= formattedDate.toLocaleString('en-GB', { timeZone: 'Asia/Kolkata', day: 'numeric', month: 'numeric', year: 'numeric', hour12: false }) %></td>
                    <td>
                      <%= days+1 %> days 
                     
                    </td>
                    
                    
                    
    
                    
                    
    
                      <td>
                        <%= workingquantity %>
                        
                      </td>
    <td>
      <%= item.rent %>
    </td><td>
    
    <% var bb =  item.rent*workingquantity*(days+1) %>
    <%= bb %>
    <% final += bb; %>
    <% if (i < item.onngoing.length) { %>
      <% workingquantity -= item.onngoing[i].quantity %>
    <% } else { %>
      
    <% } %>
    </td>
    
                    </tr>
                    <% } %>
                  <% } %>
                  
              <% }); %>
              
            
    <% receiptEdit.farmaitemreceipt.forEach(item => { %> 
      <tr>
        <td>
          <%= b %><% b++ %> 
        </td>
        <td>
    Farma <%= item.length1farma %>X<%= item.length2farma %> (<%= item.heightfarma %>)
        </td>
        <td>  
          <%
          dateString1 = item.Dateandtimefarma;
          const dateObject1 = new Date(dateString1);
      
          const formattedDate1 = dateObject1.toLocaleString('en-GB', {
            timeZone: 'UTC', 
            day: 'numeric',
            month: 'numeric',
            year: 'numeric',
            hour12: false,
          });
        %>
        <%= formattedDate1 %></td>
      
        <td>
          <%
            const currentDate = new Date();
            
            
        
            const formattedDate = currentDate.toLocaleString('en-GB', {
              timeZone: 'UTC',
              day: 'numeric',
              month: 'numeric',
              year: 'numeric',
              hour12: false,
            });
          %>
          <span style=" color: red;">
            <%= formattedDate %>
          </span>
        </td>
    
      <td>
        <%
          const date1Milliseconds = dateObject1.getTime();
          const currentDateMilliseconds = currentDate.getTime();
          const daysDifference = Math.floor((currentDateMilliseconds - date1Milliseconds) / (24 * 60 * 60 * 1000));
        %>
    
        <%= daysDifference+2 %> days
      </td>
    <td>
      <%= item.noofsetsfarma %>
    </td>
    <td>
      <%= item.rentpersetfarma %>
    </td>
    <td>
      <% var bb =  item.rentpersetfarma*item.noofsetsfarma*(daysDifference + 2) %>
      <%= bb %>
      <% final += bb; %>
    </td>
      </tr>
      <% }); %>
    
      <% receiptEdit.scaffoldingitemreceipt.forEach(item => { %> 
        <%
        dateString1 = item.Dateandtimescaffolding;
        const dateObject1 = new Date(dateString1);
    
        const formattedDate1 = dateObject1.toLocaleString('en-GB', {
          timeZone: 'UTC', 
          day: 'numeric',
          month: 'numeric',
          year: 'numeric',
          hour12: false,
        });
      %>
      <%
        const currentDate = new Date();
        const formattedDate = currentDate.toLocaleString('en-GB', {
          timeZone: 'UTC',
          day: 'numeric',
          month: 'numeric',
          year: 'numeric',
          hour12: false,
        });
      %>
      <%
        // Calculate the difference between the current date and the given date in milliseconds
        const dateObject2 = new Date(dateString1);
        dateObject2.setUTCHours(0, 0, 0, 0);
    
        const istOffset = 5.5 * 60 * 60 * 1000; // IST is UTC+5:30
        const currentDateMilliseconds = currentDate.getTime() + istOffset;
        const dateObject2Milliseconds = dateObject2.getTime();
        const millisecondsDifference = currentDateMilliseconds - dateObject2Milliseconds;
    
        let daysDifference = Math.floor(millisecondsDifference / (24 * 60 * 60 * 1000));
        let hoursDifference = Math.floor((millisecondsDifference % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
        let minutesDifference = Math.floor((millisecondsDifference % (60 * 60 * 1000)) / (60 * 1000));
        let secondsDifference = Math.floor((millisecondsDifference % (60 * 1000)) / 1000);
    
        // Adjust the differences to be within the correct range
        if (secondsDifference >= 60) {
          minutesDifference += Math.floor(secondsDifference / 60);
          secondsDifference %= 60;
        }
    
        if (minutesDifference >= 60) {
          hoursDifference += Math.floor(minutesDifference / 60);
          minutesDifference %= 60;
        }
    
        if (hoursDifference >= 24) {
          daysDifference += Math.floor(hoursDifference / 24);
          hoursDifference %= 24;
        }
      %>

        <tr>
          <td>
            <%= b %><% b++ %> 
          </td>
         <td onclick="makeEditable(this)">
  <span>Scaffolding <%= item.lengthoutscaffolding %>'X<%= item.heightoutscaffolding %>'</span>
</td>
<script>
  function makeEditable(td) {
    const span = td.querySelector('span');
    const originalText = span.innerText;

    // Prevent multiple inputs
    if (td.querySelector('input')) return;

    const input = document.createElement('input');
    input.type = 'text';
    input.value = originalText;
    input.style.width = '100%';

    input.onblur = function () {
      span.innerText = input.value;
      td.removeChild(input);
      td.appendChild(span);

      // Optionally: Save to server using fetch/axios here
      console.log("New value:", input.value);
    };

    input.onkeydown = function (e) {
      if (e.key === 'Enter') input.blur(); // Save on Enter
      if (e.key === 'Escape') {
        td.removeChild(input);
        td.appendChild(span);
      }
    };

    td.removeChild(span);
    td.appendChild(input);
    input.focus();
  }
</script>

          <td>  
          
          <%= formattedDate1 %></td>
          <% if(daysDifference+1 <= item.numberofdayscaffolding) { %>
         <td onclick="makeEditable(this)">
  <span style="color: red;"><%= formattedDate %></span>
</td>

          <% } else { %>
            <td>
              <%
  // Parse the `formattedDate1` (in DD/MM/YYYY format)
  const [day, month, year] = formattedDate1.split('/');
  const validDate = new Date(`${year}-${month}-${day}`); // Convert to valid Date object (YYYY-MM-DD)

  // Add `item.numberofdayscaffolding` days
  validDate.setDate(validDate.getDate() + item.numberofdayscaffolding-1);

  // Format the new date
  const newFormattedDate = validDate.toLocaleDateString('en-GB', { 
    day: '2-digit', 
    month: '2-digit', 
    year: 'numeric' 
  });
%>
<%= newFormattedDate %>

            </td>
      <% } %>

      <% if(daysDifference+1 <= item.numberofdayscaffolding) { %>
         <td onclick="makeEditable(this)">
  <span><%= daysDifference + 1 %> days</span>
</td>

          <% } else { %>
            <td>
              <%= item.numberofdayscaffolding %> days
            </td> <% } %>
      <td>
        <%= item.quantityscaffolding %>
      </td>
    
    
   
      <td>
        <%= item.rentmultipledayscaffolding %>
      </td>
    
    
     <% 
     
    
        bb = item.rentmultipledayscaffolding;
     
    
    %>
    <td>
      <%= bb %><% final += bb; %>
    </td>
    
    
    
      
        </tr>


       
    <% if(daysDifference+1 >= item.numberofdayscaffolding && item.onngoing.length == 0 ) { %>
        <tr>
          <td>
            <%= b %><% b++ %> 
          </td>
          <td>
      Scaffolding <%= item.lengthoutscaffolding %>'X<%= item.heightoutscaffolding %>'
          </td>
          <td>  
          
            <%
            // Split the date in DD/MM/YYYY format
            const [day, month, year] = formattedDate1.split('/');
            const validDate = new Date(`${year}-${month}-${day}`); // Convert to "YYYY-MM-DD"
          
            // Add days
            const totalDaysToAdd = item.numberofdayscaffolding ;
            validDate.setDate(validDate.getDate() + totalDaysToAdd);
          
            // Format the new date
            const newFormattedDate = validDate.toLocaleDateString('en-GB', { 
              day: '2-digit', 
              month: '2-digit', 
              year: 'numeric' 
            });
          %>
         <%= newFormattedDate %>
          
        
        </td>
        
          <td>
            <span style=" color: red;">
              <%= formattedDate %>
            </span>
          </td>
      
          <td>
            <%= daysDifference %> days
          </td>
      <td>
        <%= item.quantityscaffolding %>
      </td>
    
    
    <% if(daysDifference+1 <= item.numberofdayscaffolding) { %>
      <td>
        <%= item.rentmultipledayscaffolding %>
      </td>
    <% } else { %>
      <td>
        <%= item.rateafterdayscaffolding %>
      </td>
      <% } %>
    
     <% 
     
      if (daysDifference + 1 <= item.numberofdayscaffolding) { 
        bb = item.rentmultipledayscaffolding;
      } else { 
        bb = item.rateafterdayscaffolding * item.quantityscaffolding * (daysDifference - 1);
      }
    
    %>
    <td>
      <%= bb %><% final += bb; %>
    </td>
    
    
    
      
        </tr>
     <% } %>



     <% if(daysDifference+1 >= item.numberofdayscaffolding && item.onngoing.length != 0 ) { %>
      <% 
      var scaffoldingItems = []; 
     
    
      if (Array.isArray(item.onngoing)) { 
        item.onngoing.forEach(currentItem => {
          
         
            if (currentItem.Itemname.includes("Scaffolding")) {
              scaffoldingItems.push(currentItem);
            
          }
        });
      } 
    %>
    
    
    
    
r
    <% for (var i = 0; i <= scaffoldingItems.length ; i++) { %>
      <tr>
        <td>
          <%= b %><% b++ %> 
        </td>
        <td>
    Scaffolding <%= item.lengthoutscaffolding %>'X<%= item.heightoutscaffolding %>'
        </td>
        <td>  
        <% if(i == 0 ){ %>
          <%
          // Split the date in DD/MM/YYYY format
          const [day, month, year] = formattedDate1.split('/');
          const validDate = new Date(`${year}-${month}-${day}`); // Convert to "YYYY-MM-DD"
        
          // Add days
          const totalDaysToAdd = item.numberofdayscaffolding ;
          validDate.setDate(validDate.getDate() + totalDaysToAdd);
        
          // Format the new date
          const newFormattedDate = validDate.toLocaleDateString('en-GB', { 
            day: '2-digit', 
            month: '2-digit', 
            year: 'numeric' 
          });
        %>
       <%= newFormattedDate %>
        <% } else { %> 
          <ul>
            <% scaffoldingItems.forEach(item => { %>
             <%= item.quantity %>
            <% }) %>
          </ul>
          
          
          
          
          
          
      <% } %>
      </td>
      
        <td>
          <span style=" color: red;">
            <%= formattedDate %>
          </span>
        </td>
    
        <td>
          <%= daysDifference-1 %> days
        </td>
    <td>
      <%= item.quantityscaffolding %>
    </td>
  
  
  <% if(daysDifference+1 <= item.numberofdayscaffolding) { %>
    <td>
      <%= item.rentmultipledayscaffolding %>
    </td>
  <% } else { %>
    <td>
      <%= item.rateafterdayscaffolding %>
    </td>
    <% } %>
  
   <% 
   
    if (daysDifference + 1 <= item.numberofdayscaffolding) { 
      bb = item.rentmultipledayscaffolding;
    } else { 
      bb = item.rateafterdayscaffolding * item.quantityscaffolding * (daysDifference - 1);
    }
  
  %>
  <td>
    <%= bb %><% final += bb; %>
  </td>
  
  
  
    
      </tr>
<% } %>
   <% } %>

        <% }); %>
    
    
    <tfoot>
    
      <% if (receiptEdit.additionalcharges && receiptEdit.additionalcharges.length > 0) { %>
        <%
        // Initialize the combined string and total cost
        let combinedString = "";
        let totalCost = 0;
    
        // Build the combined string and accumulate the total cost
        receiptEdit.additionalcharges.forEach((itemmm, index) => {
            if (index > 0) {
                combinedString += " + ";
            }
            combinedString += itemmm.additionalchargesName + " (Rs " + itemmm.additionalchargesCost + ")";
            totalCost += parseFloat(itemmm.additionalchargesCost); // Assuming additionalchargesCost is a number or can be parsed as a float
        });
    
        // Add the total cost to the final amount
        final += totalCost;
        %>
    
        <tr>
          <td></td>
            <td colspan="6">Additional charges :  <%= combinedString %></td>
           
            <td> <%= totalCost %></td>
        </tr>
    <% } %>
    
    
    <tr id="totals-row">
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td><strong>Total:</strong></td>
        <td id="totalinout"><%= final %></td>
    </tr>
    
    <tr>
        <td></td>
        <td colspan="6" style="text-align: right;">CGST (9%):</td>
        <td><%= (final * 0.09).toFixed(2) %></td>
    </tr>
    
    <tr>
        <td></td>
        <td colspan="6" style="text-align: right;">SGST (9%):</td>
        <td><%= (final * 0.09).toFixed(2) %></td>
    </tr>
    
    <tr>
        <td></td>
        <td colspan="6" style="text-align: right;"><strong> HSN Code: 9973 (Renting of scaffolding materials) / Grand Total:</strong></td>
        <td><%= (final + (final * 0.09) + (final * 0.09)).toFixed(2) %></td>
    </tr>
    <% final = Math.round(final + (final * 0.09) + (final * 0.09)) %>


    
      
      
    </tfoot>
    
    
    
    
    
    
    </tbody>
            
        </table>
        <% let totalAmount = 0; %>

       
        <style>
            .flex {
                display: flex;
                
                align-items: center;
                
            }
            .checc {
               margin-top:20px;
                 margin-left: 220px;
                
            }
            .sign {
                 margin-top: 50px;
                
            }
        .Advance{
            margin-top: 10px;
            font-size: 21px;
            
         
        }
           
        </style>
        
        <div class="flex">
            <div class="Advance">              
                    <p><strong>GRAND TOTAL :</strong> Rs <%= final %></p>
                    <p><span id="result" ><strong></strong>Result will be displayed here</span></p>
                    <% var finalsecurity = 0 %>

                    <% receiptEdit.moneyreceipt.forEach(item => { %>
                        <% if (item.inandout === 1) { %>
                            <% totalAmount += item.amount; %>
                        <% } else if (item.inandout === 0) { %>
                            <% totalAmount -= item.amount; %>
                        <% } %>
                    <% }); %>
                     <!-- Toggle Checkbox -->
<!-- Toggle Checkbox -->



            </div>
           
            <div class="checc">
                <div>For T.T. Timber Trader</div>
                <div class="sign"> Auth signature</div>
            </div>
        </div>
        <hr style="border: 1px solid #333;"/>
       <div class="terms-and-conditions">
  <h3>Terms and Conditions:</h3>
  <ul>
    <li onclick="makeEditable(this)">1. All goods and services are subject to Faridabad jurisdiction.</li>
    <li onclick="makeEditable(this)">2. Payment must be made within 30 days from the invoice date. Late payments will incur an additional fee of 2% per month on the outstanding amount.</li>
    <li onclick="makeEditable(this)">3. If the material is broken, the full amount will be charged.</li>
  </ul>
</div>

        
        <hr style="border: 1px solid #333;" />
        
        <div class="declaration">
            <h3>Declaration:</h3>
            <p>
                I hereby declare that the above details are correct and true to the best of my knowledge.
            </p>
        </div>
        
        <script>
  function makeEditable(li) {
    if (li.querySelector('input') || li.querySelector('textarea')) return;

    const originalText = li.innerText;
    const input = document.createElement('textarea');
    input.value = originalText;
    input.style.width = '100%';
    input.rows = 3;

    input.onblur = () => {
      li.innerText = input.value.trim();
      li.setAttribute('onclick', 'makeEditable(this)');
    };

    input.onkeydown = (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        input.blur();
      }
      if (e.key === 'Escape') {
        li.innerText = originalText;
        li.setAttribute('onclick', 'makeEditable(this)');
      }
    };

    li.innerHTML = '';
    li.appendChild(input);
    input.focus();
  }
</script>

       
    </div>
    <div style="text-align: center; font-style: italic; margin-top: 20px;">
        This is a computer-generated invoice.
    </div>
    
    <script>
        var a = ['','One ','Two ','Three ','Four ', 'Five ','Six ','Seven ','Eight ','Nine ','Ten ','Eleven ','Twelve ','Thirteen ','Fourteen ','Fifteen ','Sixteen ','Seventeen ','Eighteen ','Nineteen '];
        var b = ['', '', 'Twenty','Thirty','Forty','Fifty', 'Sixty','Seventy','Eighty','Ninety'];
        
        function inWords(num) {
            if ((num = num.toString()).length > 9) return 'overflow';
            n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return; 
            var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';
            str += (n[5] != 0) ? ((str != '') ? 'And ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]])  : '';
            return str.trim();
        }
        
        document.addEventListener('DOMContentLoaded', function () {
        var totalAmount = <%= final %> ;
        document.getElementById('result').textContent = 'Rupees ' + inWords(totalAmount) + ' Only ';
    });
    </script>
</body>
</html>
