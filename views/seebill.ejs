<%- include('nav bar/navbar.ejs') %>
    <title>ITEM Database</title>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <link rel='stylesheet' href='/stylesheets/receipt.css' />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
   

<head> 
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>


<style>

.delete-button {
   
    color: #ffffff; 
    border: none;
    padding: 5px 10px;
    cursor: pointer;

    transition: transform 0.3s ease;
  }

  .delete-button i {
    /* Style the icon */
    color: #000000; /* Set the icon color */
    margin-right: 5px;
    transform: scale(1.3);
    transition-delay: 0.5s;
    color: red;
  }
  .delete-button:hover {
    /* Increase size on hover */
    transform: scale(1.6);
   
  }






.form-row {
  border: 1px solid #ddd;
  border-radius: 8px;
  margin-bottom: 15px;
  overflow: hidden;
  background-color: #f5f5f5;
  transition: box-shadow 0.3s ease;
  width: 110%;
  margin: 20px;
}

/* Style the serial number column */
.serial-number {
  font-weight: bold;
  padding: 10px;
  border-right: 1px solid #ddd;
  background-color: #e0e0e0;
}

/* Style the input fields */
input[type="datetime-local"],
input[type="text"] {
  width: 100%;
  padding: 12px;
  margin: 5px 0;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-family: 'Arial', sans-serif;
}

/* Style the autocomplete dropdown */
.autocomplete-dropdown {
  width: 30%;
}

/* Style the delete button */


/* Add some margin to the delete button */
.delete-button {
  margin-top: 2px;
}

/* Style the table row on hover for better UX */
.form-row:hover {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}






/* Center the submit button */
input[type="submit"] {
  display: block;
  margin: 0 auto;
  margin-bottom: 20px;
  background-color: #3498db;
  color: #fff;
  padding: 12px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s ease;
  
}

input[type="submit"]:hover {
  background-color: #2980b9;
}


.add-more-button {
    padding: 10px;
    margin: 20px; 
  }

  
  table {
    width: 95%;
    border-collapse: collapse;
    margin: 10px;
  }
  
  th, td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  th:nth-child(1),
  td:nth-child(1) {
    width: 5%; /* You can adjust this value as needed */
  }
  th:nth-child(2),
  td:nth-child(2) {
    width: 18%; /* You can adjust this value as needed */
  }

  th:nth-child(6),
  td:nth-child(6) {
    width: 15%; /* You can adjust this value as needed */
  }

  th:nth-child(7),
  td:nth-child(7) {
    width: 10%; /* You can adjust this value as needed */
  }
  /* Adjust the width of the Item Name column */
  th:nth-child(3),
  td:nth-child(3) {
    width: 15%; /* You can adjust this value as needed */
  }
  
  th:nth-child(4),
  td:nth-child(4),
  th:nth-child(5),
  td:nth-child(5) {
    width: 18%; 
  }

  h1 {
    color: #333; /* Set your desired text color */
    font-family: 'Arial', sans-serif; /* Set your desired font family */
    font-size: 24px; /* Set your desired font size */
    margin: 20px; /* Set your desired margin */
  
  }

  .header-container h1,
.header-container button {
  display: inline-block; /* or 'inline' depending on your styling requirements */
  vertical-align: middle; /* Align elements vertically */
  margin: 5; /* Remove default margins */
}


</style>

<style>
    .datetime
    {
margin: 10px;
    }
</style>

<% let totalAmount = 0; %>

<% receiptEdit.moneyreceipt.forEach(item => { %>
    <% if (item.inandout === 1) { %>
        <% totalAmount += item.amount; %>
    <% } else if (item.inandout === 0) { %>
        <% totalAmount -= item.amount; %>
    <% } %>
<% }); %>

<main class="table">
  <div class="form-conntainer" style=" height: 650px;   overflow-y: auto;">
  <section class="table__header">
      <h1>Receipt No: #<%= receiptEdit.receiptChallannumber %> , Name : <%= receiptEdit.receiptclientname.clientName %> , Advance <%= totalAmount %> </h1>       
  </section>
  
  <section class="table__body">

    <div class="header-container">
      
    </div>
    


    <form action="/clearorder/<%= receiptEdit._id %>" method="POST">
  
     
        <table>
        
       
          <div style="display: flex; align-items: center; margin-bottom: 10px; width: 100%;">
            <div style="margin-right: 10px;">
                <label for="Finalamount" style="font-weight: bold;">Final amount:</label>
                <div style="margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f995;">
                    <input type="number" name="Finalamount" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; box-sizing: border-box; font-size: 14px;">
                </div>
            </div>
            <div style="margin-right: 10px;">
                <label for="datetimeclear" style="font-weight: bold;">datetimeclear:</label>
                <div style="margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f995;">
                    <input type="datetime-local" id="datetimeclear" name="datetimeclear" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; box-sizing: border-box; font-size: 14px;">
                </div>
            </div>
            <div style="margin-right: 10px;">
              <label for="moneydeborcre" style="font-weight: bold;">Final amount:</label>
              <div class="dropdown" style="margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f995;">
                  <select name="moneydeborcre" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; box-sizing: border-box; font-size: 14px;">
                      <option value="" disabled>Select an option</option>
                      <option value="0" selected>Debit</option>
                      <option value="1">Credit</option>
                  </select>
              </div>
          </div>


          <div style="margin-right: 10px;">
            <label for="addinitem" style="font-weight: bold;">Add all these items in stocks :</label>
            <div style="margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f995; display: flex; align-items: center;">
                <input type="checkbox" id="addinitem" name="addinitem" checked style="width: 20px; height: 20px; border: 1px solid #ccc; border-radius: 5px; box-sizing: border-box; font-size: 14px; margin-right: 10px;">
                <span style="font-size: 14px;">Return all</span>
            </div>
        </div>      
          </div>
        </div>
        
        <script>
          // Call the setDefaultDatetime function when the page loads
          document.addEventListener('DOMContentLoaded', function() {
              // Get the datetimeclear input element
              const datetimeclearInput = document.getElementById('datetimeclear');
              
              // Set the default datetime value
              setDefaultDatetime(datetimeclearInput);
          });
      
          function setDefaultDatetime(datetimeclear) {
              const currentDate = new Date();
              const year = currentDate.getFullYear();
              const month = String(currentDate.getMonth() + 1).padStart(2, '0');
              const day = String(currentDate.getDate()).padStart(2, '0');
              const hours = String(currentDate.getHours()).padStart(2, '0');
              const minutes = String(currentDate.getMinutes()).padStart(2, '0');
      
              const currentDatetime = `${year}-${month}-${day}T${hours}:${minutes}`;
              datetimeclear.value = currentDatetime;
          }
      </script>
      
      
      
        
        

        
        <thead>
          <tr>
            <th>#</th>
            <th>Item Name</th>
            <th>Start date</th>
            <th>End date</th>
            <th>Total days</th> 
            <th>Quantity</th> 
            <th>Rate</th> 
            <th>Total</th>
          </tr>
          <% var final = 0; %>
        </thead>
        <tbody id="form-rows">
             
          <% var b = 1 %>
              <% receiptEdit.generalitemreceipt.forEach(item => { %>
              <% let finalquantity2; %><% let finalquantity3; %>
              <% var first = 0 %><% let checkro2; %>
              <% for (var i = 0; i < item.onngoing.length; i++) { %>
  <% if ((item.onngoing.length > 1 || first === 0)&& checkro2 !== 0) { %>
           <tr>
            
            <td>
          <%= b %><% b++ %> 
            </td>
            <td>
           <%= item.itemoutname %>          
          </td>
        



          <% let dateString1; %>
          <% if (i === 0) { 
            dateString1 = item.Dateandtime;
          } else { %>
            <% if (item.onngoing && item.onngoing.length >= i) { %>
              <% dateString1 = item.onngoing[i-1].returndateAt; %>
            <% } %>
          <% } %>
          
          <td>
            <%
              const dateObject1 = new Date(dateString1);
              if (i !== 0 ) { 
                dateObject1.setDate(dateObject1.getDate() + 1);
              } 
              const formattedDate1 = dateObject1.toLocaleString('en-GB', {
                timeZone: 'UTC', 
                day: 'numeric',
                month: 'numeric',
                year: 'numeric',
                hour12: false,
              });
            %>
            <%= formattedDate1 %>
          </td>
        

          <% var returndate; %>

          <% item.onngoing.forEach((itemm, index) => { %>
            <% if (index === i) { %>
                <% returndate = itemm.returndateAt; %>
            <% } else if (i == item.onngoing.length){ %>
                <% let currentDate = new Date(); %>
                <% returndate = currentDate; %>
                
            <% } %>
           
        <% }); %>
        
          
          <% if (item.onngoing.length === 0) { %>
            <% let currentDate = new Date(); %>
            <% returndate = currentDate; %>
          <% } %>

          <%
          const dateObjectReturndate = new Date(returndate);
          let formattedReturndate;  

          if (item.onngoing.length === 0) { 
            formattedReturndate = dateObjectReturndate.toLocaleString('en-GB', {
              timeZone: 'UTC',
              day: 'numeric',
              month: 'numeric',
              year: 'numeric',
            });
          }
           else {
            formattedReturndate = dateObjectReturndate.toLocaleString('en-GB', {
              timeZone: 'UTC',
              day: 'numeric',
              month: 'numeric',
              year: 'numeric',
              hour: 'numeric',
              minute: 'numeric',
              hour12: true,
            });
          }
          
          
          
          const daysDifference = Math.ceil((dateObjectReturndate.getTime() - dateObject1.getTime()) / (1000 * 60 * 60 * 24));

          let daysDifferenceMessage = daysDifference === 0 ? '1 day' : `${daysDifference + 1} days`;

          

            
          %>
         
          <td>
          <%= formattedReturndate %>
          </td>

          <td>
            <%= daysDifferenceMessage %>
         
          </td>
          
          <% let checkro; %>
          
          <% if (i === 0) {  
            finalquantity2 = item.Quantity; 

            for (var bbb = 0; bbb <= i; bbb++) {
              
              checkro = item.onngoing[bbb]?.quantity || 0; 
             
            }

          } else {
            finalquantity2 = item.Quantity; 
          
            for (var bb = 0; bb < i; bb++) {
              finalquantity2 -= item.onngoing[bb]?.quantity || 0;
              checkro = item.onngoing[bb+1]?.quantity || 0; 
             
            }
          } %>
          
          <td>
            <%= finalquantity2 %> <% checkro2=finalquantity2-checkro; %> 
          </td>
          
          


          <td>
            <%= item.rent %>
          </td>
          <% if (item.onngoing.length === 0 && b == 2) { %>
            <td>
              <% var finalprice =  finalquantity2 * item.rent * (daysDifference+1) %>
              <%=  finalprice  %>
              <% final += finalprice ; %>
            </td>
          <% }
           else { %>
            <td>
              <% var finalprice = finalquantity2 * item.rent * (daysDifference+1) %>
              <%=  finalprice  %>
              <% final += finalprice ; %>
            </td>
            <% } %>
          
          
          
          



        

          
         
         </tr>
<% } %>

<% } %>
<%  if (item.onngoing.length === 0) { %>
  <tr>
  <td><%= b %><% b++ %> </td>
  <td><%= item.itemoutname %></td>
  <td>  
    <%
    dateString1 = item.Dateandtime;
    const dateObject1 = new Date(dateString1);
    if (i !== 0 ) { 
      dateObject1.setDate(dateObject1.getDate() + 1);
    } 
    const formattedDate1 = dateObject1.toLocaleString('en-GB', {
      timeZone: 'UTC', 
      day: 'numeric',
      month: 'numeric',
      year: 'numeric',
      hour12: false,
    });
  %>
  <%= formattedDate1 %></td>

  <td>
    <%
      const currentDate = new Date();
      
      if (i !== 0) {
        currentDate.setDate(currentDate.getDate() + 1);
      }
  
      const formattedDate = currentDate.toLocaleString('en-GB', {
        timeZone: 'UTC',
        day: 'numeric',
        month: 'numeric',
        year: 'numeric',
        hour12: false,
      });
    %>
    <span style=" color: red;">
      <%= formattedDate %>
    </span>
  </td>
  
  <td>
    <%
      const date1Milliseconds = dateObject1.getTime();
      const currentDateMilliseconds = currentDate.getTime();
      const daysDifference = Math.floor((currentDateMilliseconds - date1Milliseconds) / (24 * 60 * 60 * 1000));
    %>

    <%= daysDifference+2 %> days
  </td>
<td>
<%= item.Quantity %>

</td>
<td>
  <%= item.rent %>

</td>
<td>
  <% var b =  item.rent*item.Quantity*(daysDifference + 2) %>
  <%= b %>
  <% final += b; %>


</td>

</tr>
<% } %>
<% }); %>
<% receiptEdit.farmaitemreceipt.forEach(item => { %> 
  <tr>
    <td>
      <%= b %><% b++ %> 
    </td>
    <td>
Farma <%= item.length1farma %>X<%= item.length2farma %> (<%= item.heightfarma %>)
    </td>
    <td>  
      <%
      dateString1 = item.Dateandtimefarma;
      const dateObject1 = new Date(dateString1);
  
      const formattedDate1 = dateObject1.toLocaleString('en-GB', {
        timeZone: 'UTC', 
        day: 'numeric',
        month: 'numeric',
        year: 'numeric',
        hour12: false,
      });
    %>
    <%= formattedDate1 %></td>
  
    <td>
      <%
        const currentDate = new Date();
        
        
    
        const formattedDate = currentDate.toLocaleString('en-GB', {
          timeZone: 'UTC',
          day: 'numeric',
          month: 'numeric',
          year: 'numeric',
          hour12: false,
        });
      %>
      <span style=" color: red;">
        <%= formattedDate %>
      </span>
    </td>

  <td>
    <%
      const date1Milliseconds = dateObject1.getTime();
      const currentDateMilliseconds = currentDate.getTime();
      const daysDifference = Math.floor((currentDateMilliseconds - date1Milliseconds) / (24 * 60 * 60 * 1000));
    %>

    <%= daysDifference+2 %> days
  </td>
<td>
  <%= item.noofsetsfarma %>
</td>
<td>
  <%= item.rentpersetfarma %>
</td>
<td>
  <% var b =  item.rentpersetfarma*item.noofsetsfarma*(daysDifference + 2) %>
  <%= b %>
  <% final += b; %>
</td>
  </tr>

  <% }); %>




<tfoot>

  <% if (receiptEdit.additionalcharges && receiptEdit.additionalcharges.length >= 1) { %>
    <% receiptEdit.additionalcharges.forEach((charge, index) => { %>
        <tr>
            <td colspan="6">
                <% if (index === 0) { %> 
                    Additional charges
                <% } %>
            </td>
            <td><%= charge.additionalchargesName %></td>
            <td><%= charge.additionalchargesCost %></td>
            <% final += charge.additionalchargesCost; %>
        </tr>
    <% }); %>
<% } %>

  <tr id="totals-row">
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    
      <td><strong>Total:</strong></td>
      <td id="totalinout"><%= final %></td>
      
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    
      <td><strong>To Pay:</strong></td>
      <td id="totalinout"><%= totalAmount-final %></td>
      
  </tr>
</tfoot>






</tbody>

       
     
      </table>
  
  
      <br><br>
  
    
      <p id="result"></p>
      <input type="submit" value="Finalize and Close Order">
    </form>
  </section>


  </div>
</main>


<script>
    // Function to update the input with current date and time
    function updateDateTime() {
        var now = new Date();
        var year = now.getFullYear();
        var month = String(now.getMonth() + 1).padStart(2, '0'); // Months are zero-based
        var day = String(now.getDate()).padStart(2, '0');
        var hours = String(now.getHours()).padStart(2, '0');
        var minutes = String(now.getMinutes()).padStart(2, '0');

        var formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
        
        // Set the value of the input
        document.getElementById('datetimeshow').value = formattedDateTime;
    }
    updateDateTime();

   
</script>











    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

   


   
    
 



      <%- include('nav bar/navbardown.ejs') %>