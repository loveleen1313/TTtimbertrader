<%- include('nav bar/navbar.ejs') %>
    <title>ITEM Database</title>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <link rel='stylesheet' href='/stylesheets/receipt.css' />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
   

<head> 
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>


<style>

.delete-button {
   
    color: #ffffff; 
    border: none;
    padding: 5px 10px;
    cursor: pointer;

    transition: transform 0.3s ease;
  }

  .delete-button i {
    /* Style the icon */
    color: #000000; /* Set the icon color */
    margin-right: 5px;
    transform: scale(1.3);
    transition-delay: 0.5s;
    color: red;
  }
  .delete-button:hover {
    /* Increase size on hover */
    transform: scale(1.6);
   
  }






.form-row {
  border: 1px solid #ddd;
  border-radius: 8px;
  margin-bottom: 15px;
  overflow: hidden;
  background-color: #f5f5f5;
  transition: box-shadow 0.3s ease;
  width: 110%;
  margin: 20px;
}

/* Style the serial number column */
.serial-number {
  font-weight: bold;
  padding: 10px;
  border-right: 1px solid #ddd;
  background-color: #e0e0e0;
}

/* Style the input fields */
input[type="datetime-local"],
input[type="text"] {
  width: 100%;
  padding: 12px;
  margin: 5px 0;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-family: 'Arial', sans-serif;
}

/* Style the autocomplete dropdown */
.autocomplete-dropdown {
  width: 30%;
}

/* Style the delete button */


/* Add some margin to the delete button */
.delete-button {
  margin-top: 2px;
}

/* Style the table row on hover for better UX */
.form-row:hover {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}






/* Center the submit button */
input[type="submit"] {
  display: block;
  margin: 0 auto;
  margin-bottom: 20px;
  background-color: #3498db;
  color: #fff;
  padding: 12px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s ease;
  
}

input[type="submit"]:hover {
  background-color: #2980b9;
}


.add-more-button {
    padding: 10px;
    margin: 20px; 
  }

  
  table {
    width: 95%;
    border-collapse: collapse;
    margin: 10px;
  }
  
  th, td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  th:nth-child(1),
  td:nth-child(1) {
    width: 5%; /* You can adjust this value as needed */
  }
  th:nth-child(2),
  td:nth-child(2) {
    width: 18%; /* You can adjust this value as needed */
  }

  th:nth-child(6),
  td:nth-child(6) {
    width: 15%; /* You can adjust this value as needed */
  }

  th:nth-child(7),
  td:nth-child(7) {
    width: 10%; /* You can adjust this value as needed */
  }
  /* Adjust the width of the Item Name column */
  th:nth-child(3),
  td:nth-child(3) {
    width: 15%; /* You can adjust this value as needed */
  }
  
  th:nth-child(4),
  td:nth-child(4),
  th:nth-child(5),
  td:nth-child(5) {
    width: 18%; 
  }

  h1 {
    color: #333; /* Set your desired text color */
    font-family: 'Arial', sans-serif; /* Set your desired font family */
    font-size: 24px; /* Set your desired font size */
    margin: 20px; /* Set your desired margin */
  
  }

  .header-container h1,
.header-container button {
  display: inline-block; /* or 'inline' depending on your styling requirements */
  vertical-align: middle; /* Align elements vertically */
  margin: 5; /* Remove default margins */
}


</style>

<style>
    .datetime
    {
margin: 10px;
    }
</style>

<% let totalAmount = 0; %>

<% receiptEdit.moneyreceipt.forEach(item => { %>
    <% if (item.inandout === 1) { %>
        <% totalAmount += item.amount; %>
    <% } else if (item.inandout === 0) { %>
        <% totalAmount -= item.amount; %>
    <% } %>
<% }); %>

<main class="table">
  <div class="form-conntainer" style=" height: 650px;   overflow-y: auto;">
  <section class="table__header">
      <h1>Receipt No: #<%= receiptEdit.receiptChallannumber %> , Name : <%= receiptEdit.receiptclientname.clientName %> , Advance <%= totalAmount %> </h1>       
  </section>
  
  <section class="table__body">

    <div class="header-container">
      
    </div>
    


    <form action="/clearorder/<%= receiptEdit._id %>" method="POST">
  
     
        <table>
        
       
          <div style="display: flex; align-items: center; margin-bottom: 10px; width: 100%;">
            <div style="margin-right: 10px;">
                <label for="Finalamount" style="font-weight: bold;">Final amount:</label>
                <div style="margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f995;">
                    <input type="number" name="Finalamount" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; box-sizing: border-box; font-size: 14px;">
                </div>
            </div>
            <div style="margin-right: 10px;">
                <label for="datetimeclear" style="font-weight: bold;">datetimeclear:</label>
                <div style="margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f995;">
                    <input type="datetime-local" id="datetimeclear" name="datetimeclear" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; box-sizing: border-box; font-size: 14px;">
                </div>
            </div>
            <div style="margin-right: 10px;">
              <label for="moneydeborcre" style="font-weight: bold;">Final amount:</label>
              <div class="dropdown" style="margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f995;">
                  <select name="moneydeborcre" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; box-sizing: border-box; font-size: 14px;">
                      <option value="" disabled>Select an option</option>
                      <option value="0" selected>Debit</option>
                      <option value="1">Credit</option>
                  </select>
              </div>
          </div>
          <div style="margin-right: 10px;">
            <label for="modeofpayment" style="font-weight: bold;">Mode of Transaction:</label>
            <div class="dropdown" style="margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f995;">
                <select name="modeofpayment" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; box-sizing: border-box; font-size: 14px;">
                    <option value="cash" selected>Cash</option>
                    <option value="paytm">Paytm</option>
                </select>
            </div>
        </div>
        
          <div style="margin-right: 10px;">
            <label for="addinitem" style="font-weight: bold;">Add all these items in stocks :</label>
            <div style="margin: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f995; display: flex; align-items: center;">
                <input type="checkbox" id="addinitem" name="addinitem" checked style="width: 20px; height: 20px; border: 1px solid #ccc; border-radius: 5px; box-sizing: border-box; font-size: 14px; margin-right: 10px;">
                <span style="font-size: 14px;">Return all</span>
            </div>
        </div>      
          </div>
        </div>
        
        <script>
          // Call the setDefaultDatetime function when the page loads
          document.addEventListener('DOMContentLoaded', function() {
              // Get the datetimeclear input element
              const datetimeclearInput = document.getElementById('datetimeclear');
              
              // Set the default datetime value
              setDefaultDatetime(datetimeclearInput);
          });
      
          function setDefaultDatetime(datetimeclear) {
              const currentDate = new Date();
              const year = currentDate.getFullYear();
              const month = String(currentDate.getMonth() + 1).padStart(2, '0');
              const day = String(currentDate.getDate()).padStart(2, '0');
              const hours = String(currentDate.getHours()).padStart(2, '0');
              const minutes = String(currentDate.getMinutes()).padStart(2, '0');
      
              const currentDatetime = `${year}-${month}-${day}T${hours}:${minutes}`;
              datetimeclear.value = currentDatetime;
          }
      </script>
      
      
      
        
        

        
        <thead>
          <tr>
            <th>#</th>
            <th>Item Name</th>
            <th>Start date</th>
            <th>End date</th>
            <th>Total days</th> 
            <th>Quantity</th> 
            <th>Rate</th> 
            <th>Total</th>
          </tr>
          <% var final = 0; %>
        </thead>
        <tbody id="form-rows">
          <% let b = 1 %>
          <% receiptEdit.generalitemreceipt.forEach(item => { %>
              <% let totalin = 0; %>
              <% item.onngoing.forEach(itemm => { %>
                  <% totalin += parseInt(itemm.quantity, 10); %> 
              <% }); %>
          
              <% if (totalin == 0) { %>
                  <tr>
                      <td>
                          <%= b %><% b++ %>
                      </td>
                      <td>
                          <%= item.itemoutname %>
                      </td>
                      <td>
                        <%
                          // Format and set time components to 00:00:00 for the given date
                          const dateString1 = item.Dateandtime;
                          const dateObject1 = new Date(dateString1);
                          dateObject1.setUTCHours(0, 0, 0, 0);
                      
                          const formattedDateTime = dateObject1.toLocaleString('en-GB', {
                            timeZone: 'UTC',
                            day: 'numeric',
                            month: 'numeric',
                            year: 'numeric',
                            
                            hour12: false
                          });
                        %>
                        <%= formattedDateTime %>
                      </td>
                     
                          <td>
                            <%
                              // Get the current date in IST
                              const currentDate = new Date();
                              const formattedDate = currentDate.toLocaleString('en-GB', {
                                timeZone: 'Asia/Kolkata', // Set the timeZone to 'Asia/Kolkata' for IST
                                day: 'numeric',
                                month: 'numeric',
                                year: 'numeric',
                                hour12: false
                              });
                            %>
                            <span style="color: red;">
                              <%= formattedDate %>
                            </span>
                          </td>
                       
                      
                      <td>
                        <%
                          // Calculate the difference between the current date and the given date in milliseconds
                          const dateObject2 = new Date(dateString1);
                          dateObject2.setUTCHours(0, 0, 0, 0);
                      
                          const istOffset = 5.5 * 60 * 60 * 1000; // IST is UTC+5:30
                          const currentDateMilliseconds = currentDate.getTime() + istOffset;
                          const dateObject2Milliseconds = dateObject2.getTime();
                          const millisecondsDifference = currentDateMilliseconds - dateObject2Milliseconds;
                      
                          let daysDifference = Math.floor(millisecondsDifference / (24 * 60 * 60 * 1000));
                          let hoursDifference = Math.floor((millisecondsDifference % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
                          let minutesDifference = Math.floor((millisecondsDifference % (60 * 60 * 1000)) / (60 * 1000));
                          let secondsDifference = Math.floor((millisecondsDifference % (60 * 1000)) / 1000);
                      
                          // Adjust the differences to be within the correct range
                          if (secondsDifference >= 60) {
                            minutesDifference += Math.floor(secondsDifference / 60);
                            secondsDifference %= 60;
                          }
                      
                          if (minutesDifference >= 60) {
                            hoursDifference += Math.floor(minutesDifference / 60);
                            minutesDifference %= 60;
                          }
                      
                          if (hoursDifference >= 24) {
                            daysDifference += Math.floor(hoursDifference / 24);
                            hoursDifference %= 24;
                          }
                        %>
                        <%= daysDifference+1 %> days
                      </td>
                      <td>
                        <%= item.Quantity %>
                      </td>
                      <td>
                        <%= item.rent %>
                      </td>
                      <td>
                        
                        <% var bb =  item.Quantity * item.rent * (daysDifference+1) %>
<%= bb %>
<% final += bb; %>
                      </td>
                      
                      
                      
                      
                      
                      
                      
                      
                      



                  </tr>
              <% } else if (totalin > 0) { %>
                <% 
                  var checkno;
                  if (totalin == item.Quantity) {
                    checkno = item.onngoing.length;
                  } else {
                    checkno = item.onngoing.length + 1;
                  }  
                %>
                <% var workingquantity = item.Quantity %>
                <% for (var i = 0; i< checkno; i++) { %>            
                <tr>
                  <% if (i < item.onngoing.length) { %>
                    <% item.onngoing[i].quantity %>
                  <% } else { %>
                    
                  <% } %>
                  <td>
                    <%= b %><% b++ %>
                  </td>
                  <td>
                    <%= item.itemoutname %>
                  </td>
                  <%
                  let formattedDateTime, formattedDate;
                
                  // Calculate the start date string based on the condition
                  let startDateStr;
                  if (i == 0) {
                    startDateStr = item.Dateandtime;
                  } else {
                    // Get the previous return date and add one day to it
                    const prevReturnDateStr = item.onngoing[i - 1].returndateAt;
                    const prevReturnDate = new Date(prevReturnDateStr);
                    prevReturnDate.setDate(prevReturnDate.getDate() + 1); // Add one day
                    startDateStr = prevReturnDate.toISOString(); // Convert back to string
                  }
                
                  const startDate = new Date(startDateStr);
                  startDate.setUTCHours(0, 0, 0, 0);
                
                  formattedDateTime = startDate.toLocaleString('en-GB', {
                    timeZone: 'UTC',
                    day: 'numeric',
                    month: 'numeric',
                    year: 'numeric',
                    hour12: false
                  });
                
                  // Determine the end date or the current date
                  if (item.onngoing && item.onngoing[i] && item.onngoing[i].returndateAt) {
                    const endDateStr = item.onngoing[i].returndateAt;
                    const endDate = new Date(endDateStr);
                    
                    formattedDate = endDate;
                  } else {
                    formattedDate = new Date();
                  }
                
                  // Function to calculate the time difference
                  function calculateTimeDifference(startDate, endDate) {
                    const millisecondsDifference = endDate.getTime() - startDate.getTime();
                    
                    const days = Math.floor(millisecondsDifference / (24 * 60 * 60 * 1000));
                    const hours = Math.floor((millisecondsDifference % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
                    const minutes = Math.floor((millisecondsDifference % (60 * 60 * 1000)) / (60 * 1000));
                    const seconds = Math.floor((millisecondsDifference % (60 * 1000)) / 1000);
                    
                    return { days, hours, minutes, seconds };
                  }
                
                  // Use formattedDate for the end date in the calculation
                  const { days, hours, minutes, seconds } = calculateTimeDifference(startDate, formattedDate);
                %>
                
                <!-- Display the results in the table -->
                <td><%= formattedDateTime %></td>
                <td><%= formattedDate.toLocaleString('en-GB', { timeZone: 'Asia/Kolkata', day: 'numeric', month: 'numeric', year: 'numeric', hour12: false }) %></td>
                <td>
                  <%= days+1 %> days 
                 
                </td>
                
                
                

                
                

                  <td>
                    <%= workingquantity %>
                    
                  </td>
<td>
  <%= item.rent %>
</td><td>

<% var bb =  item.rent*workingquantity*(days+1) %>
<%= bb %>
<% final += bb; %>
<% if (i < item.onngoing.length) { %>
  <% workingquantity -= item.onngoing[i].quantity %>
<% } else { %>
  
<% } %>
</td>

                </tr>
                <% } %>
              <% } %>
              
          <% }); %>
          
        
<% receiptEdit.farmaitemreceipt.forEach(item => { %> 
  <tr>
    <td>
      <%= b %><% b++ %> 
    </td>
    <td>
Farma <%= item.length1farma %>X<%= item.length2farma %> (<%= item.heightfarma %>)
    </td>
    <td>  
      <%
      dateString1 = item.Dateandtimefarma;
      const dateObject1 = new Date(dateString1);
  
      const formattedDate1 = dateObject1.toLocaleString('en-GB', {
        timeZone: 'UTC', 
        day: 'numeric',
        month: 'numeric',
        year: 'numeric',
        hour12: false,
      });
    %>
    <%= formattedDate1 %></td>
  
    <td>
      <%
        const currentDate = new Date();
        
        
    
        const formattedDate = currentDate.toLocaleString('en-GB', {
          timeZone: 'UTC',
          day: 'numeric',
          month: 'numeric',
          year: 'numeric',
          hour12: false,
        });
      %>
      <span style=" color: red;">
        <%= formattedDate %>
      </span>
    </td>

  <td>
    <%
      const date1Milliseconds = dateObject1.getTime();
      const currentDateMilliseconds = currentDate.getTime();
      const daysDifference = Math.floor((currentDateMilliseconds - date1Milliseconds) / (24 * 60 * 60 * 1000));
    %>

    <%= daysDifference+2 %> days
  </td>
<td>
  <%= item.noofsetsfarma %>
</td>
<td>
  <%= item.rentpersetfarma %>
</td>
<td>
  <% var bb =  item.rentpersetfarma*item.noofsetsfarma*(daysDifference + 2) %>
  <%= bb %>
  <% final += bb; %>
</td>
  </tr>
  <% }); %>

  <% receiptEdit.scaffoldingitemreceipt.forEach(item => { %> 
    <tr>
      <td>
        <%= b %><% b++ %> 
      </td>
      <td>
  Scaffolding <%= item.lengthoutscaffolding %>'X<%= item.heightoutscaffolding %>'
      </td>
      <td>  
        <%
        dateString1 = item.Dateandtimescaffolding;
        const dateObject1 = new Date(dateString1);
    
        const formattedDate1 = dateObject1.toLocaleString('en-GB', {
          timeZone: 'UTC', 
          day: 'numeric',
          month: 'numeric',
          year: 'numeric',
          hour12: false,
        });
      %>
      <%= formattedDate1 %></td>
    
      <td>
        <%
          const currentDate = new Date();
          
          
      
          const formattedDate = currentDate.toLocaleString('en-GB', {
            timeZone: 'UTC',
            day: 'numeric',
            month: 'numeric',
            year: 'numeric',
            hour12: false,
          });
        %>
        <span style=" color: red;">
          <%= formattedDate %>
        </span>
      </td>
  
      <td>
        <%
          // Calculate the difference between the current date and the given date in milliseconds
          const dateObject2 = new Date(dateString1);
          dateObject2.setUTCHours(0, 0, 0, 0);
      
          const istOffset = 5.5 * 60 * 60 * 1000; // IST is UTC+5:30
          const currentDateMilliseconds = currentDate.getTime() + istOffset;
          const dateObject2Milliseconds = dateObject2.getTime();
          const millisecondsDifference = currentDateMilliseconds - dateObject2Milliseconds;
      
          let daysDifference = Math.floor(millisecondsDifference / (24 * 60 * 60 * 1000));
          let hoursDifference = Math.floor((millisecondsDifference % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));
          let minutesDifference = Math.floor((millisecondsDifference % (60 * 60 * 1000)) / (60 * 1000));
          let secondsDifference = Math.floor((millisecondsDifference % (60 * 1000)) / 1000);
      
          // Adjust the differences to be within the correct range
          if (secondsDifference >= 60) {
            minutesDifference += Math.floor(secondsDifference / 60);
            secondsDifference %= 60;
          }
      
          if (minutesDifference >= 60) {
            hoursDifference += Math.floor(minutesDifference / 60);
            minutesDifference %= 60;
          }
      
          if (hoursDifference >= 24) {
            daysDifference += Math.floor(hoursDifference / 24);
            hoursDifference %= 24;
          }
        %>
        <%= daysDifference+1 %> days
      </td>
  <td>
    <%= item.quantityscaffolding %>
  </td>


<% if(daysDifference+1 <= item.numberofdayscaffolding) { %>
  <td>
    <%= item.rentmultipledayscaffolding %>
  </td>
<% } else { %>
  <td>
    <%= item.rateafterdayscaffolding %>
  </td>
  <% } %>

 <% 
 
  if (daysDifference + 1 <= item.numberofdayscaffolding) { 
    bb = item.rentmultipledayscaffolding;
  } else { 
    bb = item.rateafterdayscaffolding * item.quantityscaffolding * (daysDifference + 1);
  }

%>
<td>
  <%= bb %><% final += bb; %>
</td>



  
    </tr>
    <% }); %>


<tfoot>

  <% if (receiptEdit.additionalcharges && receiptEdit.additionalcharges.length >= 1) { %>
    <% receiptEdit.additionalcharges.forEach((charge, index) => { %>
        <tr>
            <td colspan="6">
                <% if (index === 0) { %> 
                    Additional charges
                <% } %>
            </td>
            <td><%= charge.additionalchargesName %></td>
            <td><%= charge.additionalchargesCost %></td>
            <% final += charge.additionalchargesCost; %>
        </tr>
    <% }); %>
<% } %>

  <tr id="totals-row">
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    
      <td><strong>Total:</strong></td>
      <td id="totalinout"><%= final %></td>
      
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    
    <% 
    const balance = totalAmount - final;
    const label = balance < 0 ? "To Receive" : "To Pay";
  %>
  
  <td><strong><%= label %>:</strong></td>
  <td id="totalinout"><%= Math.abs(balance) %></td>
  
      
  </tr>
</tfoot>






</tbody>

       
     
      </table>
  
  
      <br><br>
  
    
      <p id="result"></p>
      <input type="submit" value="Finalize and Close Order">
    </form>
  </section>


  </div>
</main>


<script>
    // Function to update the input with current date and time
    function updateDateTime() 
    {
        var now = new Date();
        var year = now.getFullYear();
        var month = String(now.getMonth() + 1).padStart(2, '0'); // Months are zero-based
        var day = String(now.getDate()).padStart(2, '0');
        var hours = String(now.getHours()).padStart(2, '0');
        var minutes = String(now.getMinutes()).padStart(2, '0');

        var formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
        
        // Set the value of the input
        document.getElementById('datetimeshow').value = formattedDateTime;
    }
    updateDateTime();

   
</script>











    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

   


   
    
 



      <%- include('nav bar/navbardown.ejs') %>