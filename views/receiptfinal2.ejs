<%- include('nav bar/navbar.ejs') %>
    <title>ITEM Database</title>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <link rel='stylesheet' href='/stylesheets/receipt.css' />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
   

<head> 
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<style>
  

  #form-rows {
      display: none; /* Initially hide the form */
    }

  label {
    display: flex;
    margin-bottom: 5px;
    margin: 10px;
  }

  input 
  {
    width: 20ch; 
    padding: 8px;
    box-sizing: border-box;
  }

  #linehorizontal {
    display: flex;
    align-items: center; /* Align items vertically at the center */
}

#linehorizontal label {
    margin-right: 10px; /* Adjust spacing between label and input */
}

#Wrapper {
      margin: 5px;
      padding: 15px;
      border-radius: 8px;    
    }

    label {
      display: block;
      margin-bottom: 10px;
      font-weight: bold;
      color: #333;
    }

    input {
      padding: 10px;
      border: 1px solid #303030;
      border-radius: 5px;
      width: 100%;
      box-sizing: border-box; /* Include padding in the total width */
      transition: border-color 0.3s ease;
    }

    input:focus {
      border-color: #007bff;
    }

    .checkbox-item {
        display: flex;
        align-items: center;
    }

    

    
    #checkbox-container {
  display: flex;
  flex-wrap: wrap;
}

.checkbox-row {
  flex: 1;
  max-width: 43%; 
  box-sizing: border-box;
  margin: 0.5px;
}
.checkbox-input {
  margin-right: 3px; /* Adjust the margin between checkbox input and label as needed */
  transform: scale(1.3); /* Adjust the scale factor as needed */
}

hr {
    border: 2px solid #a09d9d; /* Set the border color and style */
    margin: 20px 0; /* Set margin for spacing */
  } 


  /* Reset some default styles for button */
button {
    border: none;
    outline: none;
    cursor: pointer;
}

.add-button,
.delete-button {
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s ease, color 0.3s ease;
    margin: 10px;
}

.add-button {
    background-color: #4CAF50;
    color: white;
    padding: 12px 24px;
    margin-right: 10px;
}

.add-button:hover {
    background-color: #45a049;
}

.delete-button {
    background-color: #f44336;
    color: white;
    padding: 12px 24px;
}

.delete-button:hover {
    background-color: #d32f2f;
}

#toggle-form-button {
      padding: 10px 15px;
      background-color: #3498db;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin: 12px;
      width: 200px;
    }

    #toggle-form-button:hover {
      background-color: #2980b9;
    }

    .stock-label {
        font-size: 15px;
        color: #333; /* Dark gray color */
        margin-bottom: 5px;
    }

    .stock-number {
        display: inline-block;
        padding: 5px 10px;
        color: #000000; /* Black text color */
        font-weight: bold;
        border-radius: 5px;
        border: 2px solid #2E8B57; /* Darker green border */
    }
   
</style>

<main class="table">
  <div class="form-conntainer" style=" height: 650px;   overflow-y: auto;">
  <section class="table__header">
      <h1>Receipt No: #TT/1313</h1>       
  </section>
  
  <section class="table__body">
    
    <form action="/sample" method="POST">
      <button type="button" id="toggle-form-button">Scaffolding Calculation</button>
      <div id="form-rows">
        <div class="form-row">
          <button type="button" onclick="addRow()" class="add-button">Add Row</button>
          <button type="button" onclick="deleteRow()" class="delete-button">Delete Last Row</button>
      
          <div id="linehorizontal" class="flex-container">

            <div id="Wrapper">
            <label for="length">Length:</label>
            <input type="text" name="length[]">
            </div>

            <div id="Wrapper">
            <label for="height">Height:</label>
            <input type="text" name="height[]">
            </div>

            <div id="Wrapper">
            <label for="datetime">Date and Time:</label>
            <input type="datetime-local" id="datetimee" name="datetimee[]">
            </div>

            <div id="Wrapper">
            <label for="quantityscaffolding">Quantity:</label>
            <input type="number" name="quantityscaffolding[]" value="1">
            </div>
            
         <div id="Wrapper">
          <label for="breadthscaffolding">Breadth:</label>
          <input type="number" name="breadthscaffolding[]" value="3">
       </div>
        </div>


        <div id="linehorizontal" class="flex-container">

         <div id="Wrapper">
          <label for="ratemultipledayscaffolding">Rate (multiple days):</label>
          <input type="number" name="ratemultipledayscaffolding[]" >
       </div> <div id="Wrapper">

          <label for="numberofdaysscaffolding">No of Days:</label>
          <input type="number" name="numberofdaysscaffolding[]" >

          </div><div id="Wrapper">
          <label for="Rentafterdaysscaffolding">Rate (after days):</label>
          <input type="number" name="Rentafterdaysscaffolding[]" >
          </div>
          
          <div id="options-container">
            
            <div id="checkbox-container">

              <div class="checkbox-row">
                <div class="checkbox-item">
                  <input type="checkbox" id="Labourup" name="Labourup[]" value="Labourup" checked class="checkbox-input">
                  <label for="Labourup">Include Labour up</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="Labourdown" name="Labourdown[]" value="Labourdown" checked class="checkbox-input">
                  <label for="Labourdown">Include Labour down</label>
                </div>
              </div>
            
              <div class="checkbox-row">
                <div class="checkbox-item">
                  <input type="checkbox" id="Transportup" name="Transportup[]" value="Transportup" checked class="checkbox-input">
                  <label for="Transportup">Include Transport up</label>
                </div>
                <div class="checkbox-item">
                  <input type="checkbox" id="Transportdown" name="Transportdown[]" value="Transportdown" checked class="checkbox-input">
                  <label for="Transportdown">Include Transport down</label>
                </div>
              </div>
            
            </div>
            
          </div>
</div>


<div id="linehorizontal" class="flex-container">
       <div id="Wrapper">
        <label class="stock-label" for="Cuplock10ftscaffolding">
          <% if (allproducts && allproducts.length > 0) { %>
              <% const cuplockItem = allproducts.find(product => product.itemName === 'Cuplock 10ft'); %>
              <% if (cuplockItem) { %>
                  Cuplock 10ft: <span class="stock-number"><%= cuplockItem.workingQuantity %></span>
              <% } else { %>
                  Cuplock 10ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
              <% } %>
          <% } else { %>
              Cuplock 10ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
          <% } %>
      </label>
          <input type="number" name="Cuplock10ftscaffolding[]" >
       </div>
       <div id="Wrapper">
        <label class="stock-label" for="Cuplock5ftscaffolding">
          <% if (allproducts && allproducts.length > 0) { %>
              <% const cuplock5ftItem = allproducts.find(product => product.itemName === 'Cuplock 5ft'); %>
              <% if (cuplock5ftItem) { %>
                  Cuplock 5ft: <span class="stock-number"><%= cuplock5ftItem.workingQuantity %></span>
              <% } else { %>
                  Cuplock 5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
              <% } %>
          <% } else { %>
              Cuplock 5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
          <% } %>
      </label>
          <input type="number" name="Cuplock5ftscaffolding[]" >
          </div>
          <div id="Wrapper">
            <label class="stock-label" for="Ledger5ftscaffolding">
              <% if (allproducts && allproducts.length > 0) { %>
                  <% const ledger5ftItem = allproducts.find(product => product.itemName === 'Ledger 5ft'); %>
                  <% if (ledger5ftItem) { %>
                      Ledger 5ft: <span class="stock-number"><%= ledger5ftItem.workingQuantity %></span>
                  <% } else { %>
                      Ledger 5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                  <% } %>
              <% } else { %>
                  Ledger 5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
              <% } %>
          </label>
          
          <input type="number" name="ledger5ftscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="Ledger3ftscaffolding">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const ledger3ftItem = allproducts.find(product => product.itemName === 'Ledger 3ft'); %>
                <% if (ledger3ftItem) { %>
                    Ledger 3ft: <span class="stock-number"><%= ledger3ftItem.workingQuantity %></span>
                <% } else { %>
                    Ledger 3ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Ledger 3ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
        
          <input type="number" name="ledger3ftscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="Pin">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const pinItem = allproducts.find(product => product.itemName === 'Pin'); %>
                <% if (pinItem) { %>
                    Pin: <span class="stock-number"><%= pinItem.workingQuantity %></span>
                <% } else { %>
                    Pin: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Pin: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
          <input type="number" name="pinscaffolding[]" >
          </div>
        </div>

          <div id="linehorizontal" class="flex-container">
            <div id="Wrapper">
              <label class="stock-label" for="Cuplock8ftscaffolding">
                <% if (allproducts && allproducts.length > 0) { %>
                    <% const cuplock8ftItem = allproducts.find(product => product.itemName === 'Cuplock 8ft'); %>
                    <% if (cuplock8ftItem) { %>
                        Cuplock 8ft: <span class="stock-number"><%= cuplock8ftItem.workingQuantity %></span>
                    <% } else { %>
                        Cuplock 8ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                    <% } %>
                <% } else { %>
                    Cuplock 8ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            </label>
          <input type="number" name="Cuplock8ftscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="Ledger6.5ftscaffolding">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const ledger6_5ftItem = allproducts.find(product => product.itemName === 'ledger 6.5ft'); %>
                <% if (ledger6_5ftItem) { %>
                    Ledger 6.5ft: <span class="stock-number"><%= ledger6_5ftItem.workingQuantity %></span>
                <% } else { %>
                    Ledger 6.5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Ledger 6.5ft: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
        
          <input type="number" name="ledger6.5ftscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="Wheel">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const wheelItem = allproducts.find(product => product.itemName === 'Wheel'); %>
                <% if (wheelItem) { %>
                    Wheel: <span class="stock-number"><%= wheelItem.workingQuantity %></span>
                <% } else { %>
                    Wheel: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Wheel: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
        
          <input type="number" name="wheelscaffolding[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="WoodenChali">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const woodenChaliItem = allproducts.find(product => product.itemName === 'Woodern Chali'); %>
                <% if (woodenChaliItem) { %>
                    Wooden Chali: <span class="stock-number"><%= woodenChaliItem.workingQuantity %></span>
                <% } else { %>
                    Wooden Chali: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Wooden Chali: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
        
        
          <input type="number" name="Woodernchali[]" >
        </div>
        <div id="Wrapper">
          <label class="stock-label" for="SteelChali">
            <% if (allproducts && allproducts.length > 0) { %>
                <% const steelChaliItem = allproducts.find(product => product.itemName === 'Steel Chali'); %>
                <% if (steelChaliItem) { %>
                    Steel Chali: <span class="stock-number"><%= steelChaliItem.workingQuantity %></span>
                <% } else { %>
                    Steel Chali: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
                <% } %>
            <% } else { %>
                Steel Chali: <span class="stock-number stock-number-na">N/A</span> <!-- or any default value you want to display -->
            <% } %>
        </label>
          <input type="number" name="Steelchali[]" >
        </div>
       
        </div>
          <hr>
  
        </div>
      </div>
     
      <br><br>
      <input type="submit" value="Submit">
    </form>
  </section>


  </div>
</main>


 <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

   


    <script>

        let rowCounter = 1; 
    
        function addRow() {
          const formRows = document.getElementById('form-rows');
          const newRow = document.createElement('div');
          newRow.className = 'form-row';
          newRow.innerHTML = `
          
          <div id="linehorizontal" class="flex-container">

            <div id="Wrapper">
            <label for="length">Length:</label>
            <input type="text" name="length[]" >
            </div>

            <div id="Wrapper">
            <label for="height">Height:</label>
            <input type="text" name="height[]">
            </div>

             <div id="Wrapper">
            <label for="datetime${rowCounter}">Date and Time:</label>
            <input type="datetime-local" id="datetime${rowCounter}" name="datetime[]" >
            </div>

            <div id="Wrapper">
            <label for="quantityscaffolding">Quantity:</label>
            <input type="text" name="quantityscaffolding[]" value="1">
            </div>

            <div id="Wrapper">
              <label for="breadthscaffolding">Breadth:</label>
              <input type="text" name="breadthscaffolding[]" value="3">
            </div>

            </div>
            <div id="linehorizontal" class="flex-container">
              <div id="Wrapper">
              <label for="ratemultipledayscaffolding">Rate (multiple days):</label>
              <input type="number" name="ratemultipledayscaffolding[]" >
              </div>

            <div id="Wrapper">
            <label for="numberofdaysscaffolding">No of Days:</label>
            <input type="number" name="numberofdaysscaffolding[]" >
            </div>

            <div id="Wrapper">
            <label for="Rentafterdaysscaffolding">Rate (after days):</label>
            <input type="number" name="Rentafterdaysscaffolding[]" >
            </div>

            <div id="options-container">
    <div id="checkbox-container">

        <div class="checkbox-row">
            <div class="checkbox-item">
                <input type="checkbox" id="Labourup${rowCounter}" name="Labourup[]" value="Labourup" checked class="checkbox-input">
                <label for="Labourup${rowCounter}" class="checkbox-label">Include Labour up</label>
            </div>
            <div class="checkbox-item">
                <input type="checkbox" id="Labourdown${rowCounter}" name="Labourdown[]" value="Labourdown" checked class="checkbox-input">
                <label for="Labourdown${rowCounter}" class="checkbox-label">Include Labour down</label>
            </div>
        </div>

        <div class="checkbox-row">
            <div class="checkbox-item">
                <input type="checkbox" id="Transportup${rowCounter}" name="Transportup[]" value="Transportup" checked class="checkbox-input">
                <label for="Transportup${rowCounter}" class="checkbox-label">Include Transport up</label>
            </div>
            <div class="checkbox-item">
                <input type="checkbox" id="Transportdown${rowCounter}" name="Transportdown[]" value="Transportdown" checked class="checkbox-input">
                <label for="Transportdown${rowCounter}" class="checkbox-label">Include Transport down</label>
            </div>
        </div>

    </div>
</div>

</div>

            </div>


            
<div id="linehorizontal" class="flex-container">
<div id="Wrapper">
            <label for="Cuplock10ftscaffolding">Cuplock 10ft:</label>
            <input type="number" name="Cuplock10ftscaffolding[]" >
            </div><div id="Wrapper">
            <label for="Cuplock5ftscaffolding">Cuplock 5ft:</label>
            <input type="number"" name="Cuplock5ftscaffolding[]" >
          </div><div id="Wrapper">
            <label for="ledger5ftscaffolding">ledger 5ft:</label>
            <input type="number" name="ledger5ftscaffolding[]" >
          </div><div id="Wrapper">
            <label for="ledger3ftscaffolding">ledger 3ft:</label>
            <input type="number" name="ledger3ftscaffolding[]" >
          </div><div id="Wrapper">
            <label for="pinscaffolding">Pin:</label>
            <input type="number" name="pinscaffolding[]" >
          </div></div>
                      
<div id="linehorizontal" class="flex-container">
<div id="Wrapper">
            <label for="Cuplock8ftscaffolding">Cuplock 8ft:</label>
            <input type="number" name="Cuplock8ftscaffolding[]" >
            </div><div id="Wrapper">
            <label for="ledger6.5ftscaffolding">ledger 6.5ft:</label>
            <input type="number" name="ledger6.5ftscaffolding[]" >
            </div><div id="Wrapper">
            <label for="wheelscaffolding">Wheel:</label>
            <input type="number" name="wheelscaffolding[]">
          </div><div id="Wrapper">
            <label for="Woodernchali">Woodern chali:</label>
            <input type="number" name="Woodernchali[]" >
          </div><div id="Wrapper">
            <label for="Steelchali">Steel chali:</label>
            <input type="number" name="Steelchali[]" >
          </div></div>
            <hr>
          `;
          formRows.appendChild(newRow);
    
          // Update the new datetime input value
          const newDatetimeInput = newRow.querySelector(`input[type="datetime-local"]`);
          newDatetimeInput.value = getCurrentDateTime();
    
          rowCounter++; // Increment the counter for the next ID
        }
    
        function deleteRow() {
          const formRows = document.getElementById('form-rows');
          const rows = formRows.getElementsByClassName('form-row');
          if (rows.length > 1) {
            formRows.removeChild(rows[rows.length - 1]);
          }
        }
    
        // Add an event listener to calculate amount when input values change
        document.addEventListener('input', function(event) {
          const target = event.target;
          if (target.tagName.toLowerCase() === 'input' && target.type === 'text') {
            calculateAmount(target);
          }
        });
    
        function calculateAmount(input) {
          const row = input.closest('.form-row');
          const heightInput = row.querySelector('#Wrapper input[name="height[]"]');
          const lengthInput = row.querySelector('input[name="length[]"]');
          const Cuplock10ftInput = row.querySelector('input[name="Cuplock10ftscaffolding[]"]');
          const Cuplock5ftInput = row.querySelector('input[name="Cuplock5ftscaffolding[]"]');
          const ledger5ftInput = row.querySelector('input[name="ledger5ftscaffolding[]"]');
          const ledger3ftInput = row.querySelector('input[name="ledger3ftscaffolding[]"]');
          const pinInput = row.querySelector('input[name="pinscaffolding[]"]');
    
          // Check if both height and length inputs have values
          if (heightInput.value && lengthInput.value) {
            const height = parseFloat(heightInput.value);
            const length = parseFloat(lengthInput.value);
    
            var lastDigit = length % 10;
            var lastDigit2 = parseFloat(height) - 5;
    
            let cuplock10ft, cuplock5ft, ledger5ft, ledger3ft, pin;
    
            if (length % 5 == 0 && height % 5 == 0) {
              if (height % 10 == 0) 
              {
                cuplock10ft = (((parseFloat(length) / 5) + 1) * 2) * (height / 10);
                pin = (((parseFloat(length) / 5) + 1) * 2) * ((height / 10) - 1);
                console.log(1);
              } 
             
              else if (height % 5 == 0 && height % 10 !== 0) 
              {
                cuplock10ft = (((parseFloat(length) / 5) + 1) * 2) * ((height-5) / 10);
                cuplock5ft = (((parseFloat(length) / 5) + 1) * 2);
              }
              ledger5ft = ((parseFloat(length) / 5) * 4) * (height / 10);
              ledger3ft = (((parseFloat(length) / 5) * 2) * (height / 10)) + ((height / 10) * 2);
            }   
            else if ((lastDigit == 3 || lastDigit == 8) && height % 5 == 0) {
              if (height % 10 == 0) {
                cuplock10ft = ((((parseFloat(length) + 2) / 5) + 1) * 2) * (height / 10);
                pin = (((parseFloat(length) / 5) + 1) * 2) * ((height - 10) / 10);
              } 
             
              else if (height % 5 == 0 && height % 10 !== 0)
              {
                cuplock10ft = ((((parseFloat(length) + 2) / 5) + 1) * 2) * ((height - 5) / 10);
                pin = cuplock10ft;
                cuplock5ft = ((((parseFloat(length) + 2) / 5) + 1) * 2);
              }
              ledger5ft = (((parseFloat(length) - 3) / 5) * 4) * (height / 10);
              var diffe = ((((parseFloat(length) + 2)) / 5) * 4) * (height / 10) - ledger5ft;
              ledger3ft = ((((parseFloat(length) - 3) / 5) * 2) * (height / 10)) + ((height / 10) * 2) + ((height / 10) * 6);
            } 
            else if (length % 6.5 == 0 && length !== 65) {
              cuplock10ft = (((parseFloat(length) / 6.5) + 1) * 2) * (lastDigit2 / 10);
            }
    
            Cuplock10ftInput.value = isNaN(cuplock10ft) ? '' : cuplock10ft;
    Cuplock5ftInput.value = isNaN(cuplock5ft) ? '' : cuplock5ft;
    ledger5ftInput.value = isNaN(ledger5ft) ? '' : ledger5ft;
    ledger3ftInput.value = isNaN(ledger3ft) ? '' : ledger3ft;
    pinInput.value = isNaN(pin) ? '' : pin;
  }
   else {
   
    Cuplock10ftInput.value = '';
    Cuplock5ftInput.value = '';
    ledger5ftInput.value = '';
    ledger3ftInput.value = '';
    pinInput.value = '';
  }
}
    
       






function getCurrentDateTime() {
          const now = new Date();
          const year = now.getFullYear();
          const month = (now.getMonth() + 1).toString().padStart(2, '0');
          const day = now.getDate().toString().padStart(2, '0');
          const hours = now.getHours().toString().padStart(2, '0');
          const minutes = now.getMinutes().toString().padStart(2, '0');
          const dateTimeString = `${year}-${month}-${day}T${hours}:${minutes}`;
          return dateTimeString;
        }
    
      
      
      
      
      
      
      
      
        document.getElementById('datetimee').value = getCurrentDateTime();




        $(document).ready(function() {
      // Function to toggle the visibility of the form
      function toggleForm() {
        $("#form-rows").slideToggle();
      }

      // Attach click event to the button
      $("#toggle-form-button").click(toggleForm);
    });
      </script>
 



      <%- include('nav bar/navbardown.ejs') %>