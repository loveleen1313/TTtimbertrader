<%- include('nav bar/navbar.ejs') %>
<title>ITEM Database</title>
<link rel='stylesheet' href='/stylesheets/receipt.css' />
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<main class="table">
  <div class="form-conntainer" style="height: 650px; overflow-y: auto;">
    <section class="table__header">
      <a href="/return/<%= receiptEdit._id %>">
        <h1>Receipt No: #<%= receiptEdit.receiptChallannumber %></h1>
       
      </a>
    </section>
  
    <section class="table__body">
      <div class="header-container">
        <h1>Additional Charges</h1>
      </div>
      
      <form action="/updateadditionalcharges/<%= receiptEdit._id %>" method="POST">
        <table>
          <thead>
            <tr>
              <th class="table-headerr">#</th>
              <th>Item Name</th>
              <th>Amount</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="form-rows">
            <% var rowCounter = 1; %>
            <% receiptEdit.additionalcharges.forEach(item => { %>
              <tr id="row-<%= item._id %>">
                <td><%= rowCounter++ %></td> 
                <td class="charge-name"><%= item.additionalchargesName %></td>
                <td class="charge-cost"><%= item.additionalchargesCost %></td>
                <td>
                  <a href="javascript:void(0)" onclick="openEditChargeModal('<%= item._id %>', '<%= item.additionalchargesName %>', '<%= item.additionalchargesCost %>')">
                    <i class="fa-solid fa-pen-to-square"></i>
                  </a>
                  <a href="#" onclick="showDeleteWarning('<%= item._id %>')">
                    <button type="button" class="delete-button"><i class="fa-solid fa-trash-can"></i></button>
                  </a>
                </td>
              </tr>
            <% }); %>
          </tbody>
          
          <!-- Modal for Editing Additional Charges -->
          <div id="editChargeModal" class="modal">
            <div class="modal-content">
              <span class="close">&times;</span>
              <form id="editChargeForm">
                <input type="hidden" id="editChargeId">
                <label for="editChargeName">Charge Name:</label>
                <input type="text" id="editChargeName" name="additionalchargesName">
                <label for="editChargeCost">Charge Cost:</label>
                <input type="number" id="editChargeCost" name="additionalchargesCost" step="0.01">
                <button type="button" onclick="submitEditChargeForm()">Save</button>
              </form>
            </div>
          </div>
          
          <style>
            .modal { display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4); }
            .modal-content { background-color: #fff; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 80%; }
            .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer; }
            .close:hover { color: black; }
            #editChargeForm { display: flex; flex-direction: column; }
            #editChargeForm input { padding: 8px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px; }
            #editChargeForm button { padding: 10px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }
          </style>
          
          <script>
            var chargeModal = document.getElementById("editChargeModal");
            var closeChargeModal = chargeModal.getElementsByClassName("close")[0];
          
            closeChargeModal.onclick = function() { chargeModal.style.display = "none"; }
            window.onclick = function(event) { if (event.target == chargeModal) chargeModal.style.display = "none"; }
          
            function openEditChargeModal(id, name, cost) {
              document.getElementById("editChargeId").value = id;
              document.getElementById("editChargeName").value = name;
              document.getElementById("editChargeCost").value = cost;
              chargeModal.style.display = "block";
            }
          
            function submitEditChargeForm() {
              var id = document.getElementById("editChargeId").value;
              var name = document.getElementById("editChargeName").value;
              var cost = document.getElementById("editChargeCost").value;
          
              fetch("/editCHANGEadditionalcharges/" + id, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ additionalchargesName: name, additionalchargesCost: cost })
              })
              .then(response => response.json())
              .then(response => {
                var row = document.getElementById("row-" + id);
                row.querySelector(".charge-name").innerText = response.additionalchargesName;
                row.querySelector(".charge-cost").innerText = response.additionalchargesCost;
                chargeModal.style.display = "none";
              })
              .catch(error => alert("Error: " + error));
            }
          </script>
          
            <tr class="form-row">
              <td class="serial-number"><%= rowCounter %></td>
              <td><input type="text" name="Additionalchargesname[]" placeholder="SELECT ITEM"></td>
              <td><input type="text" name="AdditionalchargesAmount[]" placeholder="Amount"></td>
              <td><button type="button" class="delete-button" onclick="deleteRow(this)"><i class="fa-solid fa-trash-can"></i></button></td>
            </tr>
          </tbody>
        </table>
        <input type="submit" value="Submit">
      </form>
    </section>
  </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="path/to/your/script.js"></script>
<style>
  .fa-solid {
    transition: all 0.3s ease; /* Adjust the duration (0.3s) and easing function as needed */
  }

  .fa-solid:hover {
    font-size: 26px; /* Adjust the size as needed */
  }
</style>
<script>
function showDeleteWarning(itemId) {
  var confirmation = confirm("Are you sure you want to delete this item?");
  
  if (confirmation) {
    // If the user clicks "OK" in the confirmation dialog, proceed with the deletion
    window.location.href = "/deleteadditionalcharges/" + itemId;
  } else {
    // If the user clicks "Cancel" in the confirmation dialog, do nothing
    // You can add additional logic or UI feedback here if needed
  }
}
</script>
<script>

  let rowCounter = 1; // Counter for unique IDs

  function handleAutocompleteInputEvent(itemInput, row) {
    itemInput.addEventListener("input", function () {
      handleAutocomplete(itemInput, row);
    });
  }

  document.addEventListener("DOMContentLoaded", function () {
    // Set default value for the initial row
    const firstDatetimeInput = document.querySelector('input[name="datetime[]"]');
    setDefaultDatetime(firstDatetimeInput);

    const firstItemInput = document.querySelector('input[name="item[]"]');
    const firstRow = document.querySelector('.form-row');
    handleAutocompleteInputEvent(firstItemInput, firstRow);
  });

  function addRow() {
    const formRows = document.getElementById('form-rows');
    const newRow = document.createElement('tr');
    newRow.className = 'form-row';

    // Get the current date and time
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const day = String(currentDate.getDate()).padStart(2, '0');
    const hours = String(currentDate.getHours()).padStart(2, '0');
    const minutes = String(currentDate.getMinutes()).padStart(2, '0');

    const currentDatetime = `${year}-${month}-${day}T${hours}:${minutes}`;

    newRow.innerHTML = `
      <td class="serial-number">${++rowCounter}</td>
      
      <td>
        <input type="text" name="item[]" placeholder="SELECT ITEM" required>
       
      </td>
      <td><input type="text" name="quantity[]" required placeholder="Quantity"></td>
     
      <td><button type="button" class="delete-button" onclick="deleteRow(this)"><i class="fa-solid fa-trash-can"></i> </button></td>
    `;
    formRows.appendChild(newRow);

    // Update the new item input value
    const newItemInput = newRow.querySelector('input[name="item[]"]');
    handleAutocompleteInputEvent(newItemInput, newRow);



    const newRowRentInput = newRow.querySelector('input[name="rent[]"]');
const newRowQuantityInput = newRow.querySelector('input[name="quantity[]"]');

newRowRentInput.addEventListener("input", function () {
    updateAmount(newRow);
});

newRowQuantityInput.addEventListener("input", function () {
    updateAmount(newRow);
});
  }
  
  function deleteRow(button) {
    const formRows = document.getElementById('form-rows');
    const rows = formRows.getElementsByClassName('form-row');
    const row = button.closest('.form-row');
    const serialNumberCell = row.querySelector('.serial-number');

    // Update the serial numbers after deleting a row
    for (let i = Array.from(rows).indexOf(row) + 1; i < rows.length; i++) {
      const serialNumberCell = rows[i].querySelector('.serial-number');
      serialNumberCell.textContent = i;
    }

    rowCounter--;

    formRows.removeChild(row);
  }

  function handleAutocomplete(autocompleteInput, row) {
const autocompleteDropdown = row.querySelector('.autocomplete-dropdown');
const rentInput = row.querySelector('input[name="rent[]"]');
const amountInput = row.querySelector('input[name="amount[]"]');
const quantityInput = row.querySelector('input[name="quantity[]"]');

const inputValue = autocompleteInput.value.trim();
if (inputValue === "") {
  autocompleteDropdown.innerHTML = "";
  rentInput.value = ""; // Clear rent if item name is empty
  amountInput.value = ""; // Clear amount if item name is empty
  return;
}

const timestamp = new Date().getTime();
const url = `/itemname/${inputValue}?_=${timestamp}`;

axios.get(url)
  .then(function (response) {
    const data = response.data;
    const autocompleteItems = data.map(item => `
      <div class="autocomplete-item">
        <span class="autocomplete-name">${item.itemName}</span>
        <span class="autocomplete-address">${item.totalQuantity ? `(${item.totalQuantity} in stock)` : '(No stock)'}</span>
      </div>`
    ).join("");

    autocompleteDropdown.innerHTML = autocompleteItems;

    const autocompleteItemElements = document.querySelectorAll(".autocomplete-item");
    autocompleteItemElements.forEach(itemElement => {
      itemElement.addEventListener("click", function () {
        const selecteditemName = itemElement.querySelector('.autocomplete-name').innerText;
        const selecteditem = data.find(client => client.itemName === selecteditemName);

        if (selecteditem) {
          autocompleteInput.value = selecteditem.itemName + (selecteditem.totalQuantity ? ` (${selecteditem.totalQuantity} in stock)` : '');
          rentInput.value = selecteditem.rentPrice;
          if (selecteditem.itemCategory == 1) {
  // Assuming you want to set quantity to 1 if itemCategory is 1
  quantityInput.value = 1;
}
          amountInput.value = calculateAmount(row);
          autocompleteDropdown.innerHTML = "";
        } else {
          console.warn("Item not found for selected name:", selecteditemName);
        }
      });
    });
  })
  .catch(function (error) {
    console.error("Error fetching data:", error);
  });
}


function calculateAmount(row) {
const quantity = parseFloat(row.querySelector('input[name="quantity[]"]').value) || 0;
const rent = parseFloat(row.querySelector('input[name="rent[]"]').value) || 0;
return (quantity * rent).toFixed(2);
}


  function setDefaultDatetime(datetimeInput) {
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const day = String(currentDate.getDate()).padStart(2, '0');
    const hours = String(currentDate.getHours()).padStart(2, '0');
    const minutes = String(currentDate.getMinutes()).padStart(2, '0');

    const currentDatetime = `${year}-${month}-${day}T${hours}:${minutes}`;
    datetimeInput.value = currentDatetime;
  }

  document.addEventListener("click", function (event) {
    const autocompleteInputs = document.querySelectorAll('input[name="item[]"]');
    const autocompleteDropdowns = document.querySelectorAll('.autocomplete-dropdown');

    for (let i = 0; i < autocompleteInputs.length; i++) {
      if (!autocompleteInputs[i].contains(event.target) && !autocompleteDropdowns[i].contains(event.target)) {
        autocompleteDropdowns[i].innerHTML = "";
      }
    }
  });


  document.addEventListener("DOMContentLoaded", function () {

const rentInputs = document.querySelectorAll('input[name="rent[]"]');
const quantityInputs = document.querySelectorAll('input[name="quantity[]"]');

rentInputs.forEach(rentInput => {
    rentInput.addEventListener("input", function () {
        updateAmount(this.closest('.form-row'));
    });
});

quantityInputs.forEach(quantityInput => {
    quantityInput.addEventListener("input", function () {
        updateAmount(this.closest('.form-row'));
    });
});
});
function updateAmount(row) {
const quantity = parseFloat(row.querySelector('input[name="quantity[]"]').value) || 0;
const rent = parseFloat(row.querySelector('input[name="rent[]"]').value) || 0;
const amountInput = row.querySelector('input[name="amount[]"]');

// Update the Amount field
amountInput.value = (quantity * rent).toFixed(2);
}


$(document).ready(function () {
$('input, select').keydown(function (e) {
  if (e.which === 38) { // Up arrow key
    e.preventDefault();
    navigateUpDown(this, 'prev');
  } else if (e.which === 40) { // Down arrow key
    e.preventDefault();
    navigateUpDown(this, 'next');
  } else if (e.which === 37) { // Left arrow key
    e.preventDefault();
    navigateLeftRight(this, 'prev');
  } else if (e.which === 39) { // Right arrow key
    e.preventDefault();
    navigateLeftRight(this, 'next');
  }
});
});

function navigateUpDown(element, direction) {
const targetElement = $(element)[direction]();
if (targetElement.length > 0) {
  targetElement.focus();
}
}

function navigateLeftRight(element, direction) {
const targetElement = $(element).closest('td')[direction]().find('input, select');
if (targetElement.length > 0) {
  targetElement.focus();
}
}





</script>
<style>
  .fa-xmark {
    font-size: 24px; /* Adjust the size as needed */
  }
  .delete-button {
     
      color: #ffffff; 
      border: none;
      padding: 5px 10px;
      cursor: pointer;
  
      transition: transform 0.3s ease;
    }
  
    .delete-button i {
      /* Style the icon */
      color: #000000; /* Set the icon color */
      margin-right: 5px;
      transform: scale(1.3);
      transition-delay: 0.5s;
      color: red;
    }
    .delete-button:hover {
      /* Increase size on hover */
      transform: scale(1.6);
     
    }
  
  
  
  
  
  
  .form-row {
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 15px;
    overflow: hidden;
    background-color: #f5f5f5;
    transition: box-shadow 0.3s ease;
    width: 110%;
    margin: 20px;
  }
  
  
  
  /* Style the input fields */
  input[type="datetime-local"],
  input[type="text"] {
    width: 100%;
    padding: 12px;
    margin: 5px 0;
    box-sizing: border-box;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-family: 'Arial', sans-serif;
  }
  
  .delete-button {
    margin-top: 2px;
  }
  
  /* Style the table row on hover for better UX */
  .form-row:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  
  
  
  
  
  /* Center the submit button */
  input[type="submit"] {
    display: block;
    margin: 0 auto;
    margin-bottom: 20px;
    background-color: #3498db;
    color: #fff;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
    
  }
  
  input[type="submit"]:hover {
    background-color: #2980b9;
  }
  
  
  .add-more-button {
      padding: 10px;
      margin: 20px; 
    }
  
    
    table {
      width: 102%;
      border-collapse: collapse;
      margin: 10px;
    }
    th, td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    
    
  
    th:nth-child(1),
    td:nth-child(1) {
      width: 5%; /* You can adjust this value as needed */
    }
  
  
    h1 {
      color: #333; /* Set your desired text color */
      font-family: 'Arial', sans-serif; /* Set your desired font family */
      font-size: 24px; /* Set your desired font size */
      margin: 20px; /* Set your desired margin */
    
    }
  
    .header-container h1,
  .header-container button {
    display: inline-block; /* or 'inline' depending on your styling requirements */
    vertical-align: middle; /* Align elements vertically */
    margin: 5; /* Remove default margins */
  }
  
  
  </style>
<%- include('nav bar/navbardown.ejs') %>
