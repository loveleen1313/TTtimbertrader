<%- include('nav bar/navbar.ejs') %>
    <title>ITEM Database</title>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <link rel='stylesheet' href='/stylesheets/receipt.css' />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
   

<head> 
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>


<style>

.delete-button {
   
    color: #ffffff; 
    border: none;
    padding: 5px 10px;
    cursor: pointer;

    transition: transform 0.3s ease;
  }

  .delete-button i {
    /* Style the icon */
    color: #000000; /* Set the icon color */
    margin-right: 5px;
    transform: scale(1.3);
    transition-delay: 0.5s;
    color: red;
  }
  .delete-button:hover {
    /* Increase size on hover */
    transform: scale(1.6);
   
  }



  .autocomplete-dropdown {
    position: absolute;
    width: 200px; /* Set a fixed width for the dropdown */
    max-height: 150px;
    overflow-y: auto;
    border: 1px solid #dddddd; /* Match the border style of table cells */
    background-color: #ffffff; /* Set the background color to white */
    z-index: 1; /* Ensure the dropdown appears above other elements */
  }



  .autocomplete-dropdownn {
    position: absolute;
    width: 200px; /* Set a fixed width for the dropdown */
    max-height: 150px;
    overflow-y: auto;
    border: 1px solid #dddddd; /* Match the border style of table cells */
    background-color: #ffffff; /* Set the background color to white */
    z-index: 1; /* Ensure the dropdown appears above other elements */
  }

.form-row {
  border: 1px solid #ddd;
  border-radius: 8px;
  margin-bottom: 15px;
  overflow: hidden;
  background-color: #f5f5f5;
  transition: box-shadow 0.3s ease;
  width: 110%;
  margin: 20px;
}

/* Style the serial number column */
.serial-number {
  font-weight: bold;
  padding: 10px;
  border-right: 1px solid #ddd;
  background-color: #e0e0e0;
}

/* Style the input fields */
input[type="datetime-local"],
input[type="text"] {
  width: 100%;
  padding: 12px;
  margin: 5px 0;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-family: 'Arial', sans-serif;
}

/* Style the autocomplete dropdown */
.autocomplete-dropdown {
  width: 30%;
}

.autocomplete-dropdownn{
    width: 100%;
}

 

/* Style the delete button */


/* Add some margin to the delete button */
.delete-button {
  margin-top: 2px;
}

/* Style the table row on hover for better UX */
.form-row:hover {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}






/* Center the submit button */





.add-more-button {
    padding: 10px;
    margin: 20px; 
  }

  
  table {
    width: 99%;
    border-collapse: collapse;
    margin: 10px;
  }
  th, td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  
  th:nth-child(2),
  td:nth-child(2) {
    width: 20%; /* You can adjust this value as needed */
  }

  th:nth-child(6),
  td:nth-child(6) {
    width: 15%; /* You can adjust this value as needed */
  }

  th:nth-child(7),
  td:nth-child(7) {
    width: 10%; /* You can adjust this value as needed */
  }
  /* Adjust the width of the Item Name column */
  th:nth-child(3),
  td:nth-child(3) {
    width: 25%; /* You can adjust this value as needed */
  }
  
  th:nth-child(4),
  td:nth-child(4),
  th:nth-child(5),
  td:nth-child(5) {
    width: 14%; 
  }

  h1 {
    color: #333; /* Set your desired text color */
    font-family: 'Arial', sans-serif; /* Set your desired font family */
    font-size: 24px; /* Set your desired font size */
    margin: 20px; /* Set your desired margin */
  
  }

  .header-container h1,
.header-container button {
  display: inline-block; /* or 'inline' depending on your styling requirements */
  vertical-align: middle; /* Align elements vertically */
  margin: 5; /* Remove default margins */
}


</style>





<main class="table">
  <div class="form-conntainer" style=" height: 650px;   overflow-y: auto;">
  <section class="table__header">
      <h1>Receipt No: #TT/1313</h1>       
  </section>


  <script >

    document.addEventListener('DOMContentLoaded', function () {
// Get the current date and time in the format expected by datetime-local input
function getCurrentDateTime() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');

    return `${year}-${month}-${day}T${hours}:${minutes}`;
}

// Set the current date and time to the input field
const datetimeInput = document.getElementById('datetimereceipt');
datetimeInput.value = getCurrentDateTime();
});




</script>


  <form action="/receipt12" method="POST">




  <section class="table__body">





    <div>
        <div class="-flex flex-wrap p-6 rounded-md ">
            <div class="flex flex-wrap -mx-2 mb-4">
                <div class="w-full md:w-1/4 px-2 mb-4 md:mb-0 relative">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="datetimereceipt">Date and Time</label>
                    <input id="datetimereceipt" name="datetimereceipt" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="datetime-local">
                </div>

             
             
             
             <div class="w-full md:w-1/4 px-2">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="Attachorderno">Attach Order No</label>
                    <input id="Attachorderno" name="Attachorderno" placeholder="Attach Order No" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

                </div>
            </div>
        </div>
        


            <div class="flex flex-wrap p-6 rounded-md">
              <div class="w-full md:w-1/4 px-3 mb-6 md:mb-0 relative">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputusername">Name</label>
                <div>
                    <input id="inputusername" name="Name" placeholder="Name" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

                  <div id="autocompleteDropdown" class="autocomplete-dropdownn"></div>
                </div>
              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputAddress">Address</label>
                <input id="inputAddress" name="Address" placeholder="Address" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputPhone">Phone</label>
                <input id="inputPhone" name="Phone" placeholder="Phone" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputcomment">Comment</label>
                <input id="inputcomment" name="comment" placeholder="Comment" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

              </div>
            </div>
        
        
            <div class="flex flex-wrap p-6 rounded-md">
              <div class="w-full md:w-1/4 px-3 mb-6 md:mb-0 relative">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputusername"> Contact Person </label>
                <div>
                    <input id="inputusernamesite" name="Namesite" placeholder="Contact Person Name" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

                </div>
              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputAddress">Contact Person Address</label>
                <input id="inputAddresssite" name="Addresssite" placeholder="Contact Person Address" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputPhone">Contact Person Phone</label>
                <input id="inputPhonesite" name="Phonesite" placeholder="Contact Person Phone" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">

              </div>
            
              <div class="w-full md:w-1/4 px-3">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="inputcomment">Comment</label>
                <input id="inputcommentsite" name="comment" placeholder="Contact Person Comment" class="form-input w-full py-2 px-3 border border-gray-800 rounded-md focus:outline-none focus:border-blue-500" type="text">
              </div>

            </div>
      </div>




















    <div class="header-container">
      <h1>General items</h1>
      <button type="button" class="add-more-button" onclick="addRow()"><i class="fa-solid fa-plus"></i> Add more</button>
    </div>
    


    
  
      
      <table>
        <thead>
          <tr>
            <th>#</th>
            <th>Date and Time</th>
            <th>Item Name</th>
            <th>Quantity</th>
            <th>Rent</th>
            <th>Amount</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="form-rows">
          <tr class="form-row">
            <td class="serial-number">1</td>
            <td><input type="datetime-local" name="datetime[]" ></td>
            <td>
              <input type="text" name="item[]"placeholder="SELECT ITEM" >
              <div class="autocomplete-dropdown"></div>
            </td>
            <td><input type="text" name="quantity[]"  placeholder="Quantity"></td>
            <td><input type="text" name="rent[]" placeholder="RATE"></td>
            <td><input type="text" name="amount[]" placeholder="TOTAL"></td> 
            <td><button type="button" class="delete-button" onclick="deleteRow(this)"><i class="fa-solid fa-trash-can"></i> </button></td>
  
          </tr>
        
        </tbody>


        <tbody id="advance-section">
            <tr>
                <td colspan="4"></td>
                <td>Advance Amount:</td>
                <td><input type="text" name="AdvanceAmount" placeholder="Enter Advance Amount"></td>
            </tr>
        </tbody>


      </table>
  
  
      <br><br>
  
    
      <p id="result"></p>
      <input type="submit" value="Submit">
    </form>

<style>

    
  
input[type="submit"] {
    
    color: rgb(0, 0, 0);
    padding: 15px 32px;
    text-align: center;
    width: 160vh; /* Adjusted width */
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 10px;
    cursor: pointer;
    border: 1px solid #000000;
    border-radius: 10px;
    
}


</style>


  </section>


  </div>
</main>














    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

   


    <script>

      let rowCounter = 1; // Counter for unique IDs
  
      function handleAutocompleteInputEvent(itemInput, row) {
        itemInput.addEventListener("input", function () {
          handleAutocomplete(itemInput, row);
        });
      }
  
      document.addEventListener("DOMContentLoaded", function () {
        // Set default value for the initial row
        const firstDatetimeInput = document.querySelector('input[name="datetime[]"]');
        setDefaultDatetime(firstDatetimeInput);
  
        const firstItemInput = document.querySelector('input[name="item[]"]');
        const firstRow = document.querySelector('.form-row');
        handleAutocompleteInputEvent(firstItemInput, firstRow);
      });
  
      function addRow() {
        const formRows = document.getElementById('form-rows');
        const newRow = document.createElement('tr');
        newRow.className = 'form-row';
  
        // Get the current date and time
        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        const hours = String(currentDate.getHours()).padStart(2, '0');
        const minutes = String(currentDate.getMinutes()).padStart(2, '0');
  
        const currentDatetime = `${year}-${month}-${day}T${hours}:${minutes}`;
  
        newRow.innerHTML = `
          <td class="serial-number">${++rowCounter}</td>
          <td><input type="datetime-local" name="datetime[]" value="${currentDatetime}" required></td>
          <td>
            <input type="text" name="item[]" placeholder="SELECT ITEM" required>
            <div class="autocomplete-dropdown"></div>
          </td>
          <td><input type="text" name="quantity[]" required placeholder="Quantity"></td>
          <td><input type="text" name="rent[]" placeholder="RATE"></td>
          <td><input type="text" name="amount[]" placeholder="TOTAL"></td>
          <td><button type="button" class="delete-button" onclick="deleteRow(this)"><i class="fa-solid fa-trash-can"></i> </button></td>
        `;
        formRows.appendChild(newRow);
  
        // Update the new item input value
        const newItemInput = newRow.querySelector('input[name="item[]"]');
        handleAutocompleteInputEvent(newItemInput, newRow);



        const newRowRentInput = newRow.querySelector('input[name="rent[]"]');
    const newRowQuantityInput = newRow.querySelector('input[name="quantity[]"]');

    newRowRentInput.addEventListener("input", function () {
        updateAmount(newRow);
    });

    newRowQuantityInput.addEventListener("input", function () {
        updateAmount(newRow);
    });
      }
      
      function deleteRow(button) {
        const formRows = document.getElementById('form-rows');
        const rows = formRows.getElementsByClassName('form-row');
        const row = button.closest('.form-row');
        const serialNumberCell = row.querySelector('.serial-number');
  
        // Update the serial numbers after deleting a row
        for (let i = Array.from(rows).indexOf(row) + 1; i < rows.length; i++) {
          const serialNumberCell = rows[i].querySelector('.serial-number');
          serialNumberCell.textContent = i;
        }
  
        rowCounter--;
  
        formRows.removeChild(row);
      }
  
      function handleAutocomplete(autocompleteInput, row) {
    const autocompleteDropdown = row.querySelector('.autocomplete-dropdown');
    const rentInput = row.querySelector('input[name="rent[]"]');
    const amountInput = row.querySelector('input[name="amount[]"]');
    const quantityInput = row.querySelector('input[name="quantity[]"]');
  
    const inputValue = autocompleteInput.value.trim();
    if (inputValue === "") {
      autocompleteDropdown.innerHTML = "";
      rentInput.value = ""; // Clear rent if item name is empty
      amountInput.value = ""; // Clear amount if item name is empty
      return;
    }
  
    const timestamp = new Date().getTime();
    const url = `/itemname/${inputValue}?_=${timestamp}`;
  
    axios.get(url)
      .then(function (response) {
        const data = response.data;
        const autocompleteItems = data.map(item => `
          <div class="autocomplete-item">
            <span class="autocomplete-name">${item.itemName}</span>
            <span class="autocomplete-address">${item.totalQuantity ? `(${item.totalQuantity} in stock)` : '(No stock)'}</span>
          </div>`
        ).join("");
  
        autocompleteDropdown.innerHTML = autocompleteItems;
  
        const autocompleteItemElements = document.querySelectorAll(".autocomplete-item");
        autocompleteItemElements.forEach(itemElement => {
          itemElement.addEventListener("click", function () {
            const selecteditemName = itemElement.querySelector('.autocomplete-name').innerText;
            const selecteditem = data.find(client => client.itemName === selecteditemName);
  
            if (selecteditem) {
              autocompleteInput.value = selecteditem.itemName + (selecteditem.totalQuantity ? ` (${selecteditem.totalQuantity} in stock)` : '');
              rentInput.value = selecteditem.rentPrice;
              if (selecteditem.itemCategory == 1) {
      // Assuming you want to set quantity to 1 if itemCategory is 1
      quantityInput.value = 1;
    }
              amountInput.value = calculateAmount(row);
              autocompleteDropdown.innerHTML = "";
            } else {
              console.warn("Item not found for selected name:", selecteditemName);
            }
          });
        });
      })
      .catch(function (error) {
        console.error("Error fetching data:", error);
      });
  }
  
  
  function calculateAmount(row) {
    const quantity = parseFloat(row.querySelector('input[name="quantity[]"]').value) || 0;
    const rent = parseFloat(row.querySelector('input[name="rent[]"]').value) || 0;
    return (quantity * rent).toFixed(2);
}

  
      function setDefaultDatetime(datetimeInput) {
        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        const hours = String(currentDate.getHours()).padStart(2, '0');
        const minutes = String(currentDate.getMinutes()).padStart(2, '0');
  
        const currentDatetime = `${year}-${month}-${day}T${hours}:${minutes}`;
        datetimeInput.value = currentDatetime;
      }
  
      document.addEventListener("click", function (event) {
        const autocompleteInputs = document.querySelectorAll('input[name="item[]"]');
        const autocompleteDropdowns = document.querySelectorAll('.autocomplete-dropdown');
  
        for (let i = 0; i < autocompleteInputs.length; i++) {
          if (!autocompleteInputs[i].contains(event.target) && !autocompleteDropdowns[i].contains(event.target)) {
            autocompleteDropdowns[i].innerHTML = "";
          }
        }
      });
  
    
      document.addEventListener("DOMContentLoaded", function () {
    
    const rentInputs = document.querySelectorAll('input[name="rent[]"]');
    const quantityInputs = document.querySelectorAll('input[name="quantity[]"]');

    rentInputs.forEach(rentInput => {
        rentInput.addEventListener("input", function () {
            updateAmount(this.closest('.form-row'));
        });
    });

    quantityInputs.forEach(quantityInput => {
        quantityInput.addEventListener("input", function () {
            updateAmount(this.closest('.form-row'));
        });
    });
});
function updateAmount(row) {
    const quantity = parseFloat(row.querySelector('input[name="quantity[]"]').value) || 0;
    const rent = parseFloat(row.querySelector('input[name="rent[]"]').value) || 0;
    const amountInput = row.querySelector('input[name="amount[]"]');
    
    // Update the Amount field
    amountInput.value = (quantity * rent).toFixed(2);
}

  
$(document).ready(function () {
    $('input, select').keydown(function (e) {
      if (e.which === 38) { // Up arrow key
        e.preventDefault();
        navigateUpDown(this, 'prev');
      } else if (e.which === 40) { // Down arrow key
        e.preventDefault();
        navigateUpDown(this, 'next');
      } else if (e.which === 37) { // Left arrow key
        e.preventDefault();
        navigateLeftRight(this, 'prev');
      } else if (e.which === 39) { // Right arrow key
        e.preventDefault();
        navigateLeftRight(this, 'next');
      }
    });
  });

  function navigateUpDown(element, direction) {
    const targetElement = $(element)[direction]();
    if (targetElement.length > 0) {
      targetElement.focus();
    }
  }

  function navigateLeftRight(element, direction) {
    const targetElement = $(element).closest('td')[direction]().find('input, select');
    if (targetElement.length > 0) {
      targetElement.focus();
    }
  }
  
 



    </script>
    
<script>
    
    document.addEventListener("DOMContentLoaded", function () {
      const inp = document.querySelector("#inputusername");
      console.log(inp);
      const dropdown = document.getElementById("autocompleteDropdown");
      const inputAddress = document.getElementById("inputAddress");
      const inputPhone = document.getElementById("inputPhone");
      const inputcomment = document.getElementById("inputcomment");

      inp.addEventListener("input", function () {
        const inputValue = inp.value.trim();
        if (inputValue === "") {
          dropdown.innerHTML = "";
          inputAddress.value = "";
          inputPhone.value = "";
          inputcomment.value = "";
          return;
        }

        const timestamp = new Date().getTime();
        const url = `/username/${inputValue}?_=${timestamp}`;

        axios.get(url)
          .then(function (response) {
            const data = response.data;
            console.log(data);
            const autocompleteItems = data.map(item => `
              <div class="autocomplete-item">
                <span class="autocomplete-name">${item.clientName}</span>
                <span class="autocomplete-address">${item.address || 'No address'}</span>
              </div>`
            ).join("");

            dropdown.innerHTML = autocompleteItems;

            const autocompleteItemElements = document.querySelectorAll(".autocomplete-item");
            autocompleteItemElements.forEach(item => {
              item.addEventListener("click", function () {
  const selectedClientName = item.querySelector('.autocomplete-name').innerText;
  const selectedClient = data.find(client => client.clientName === selectedClientName);

  if (selectedClient) {
    inp.value = selectedClient.clientName;
    inputAddress.value = selectedClient.address || "";
    inputPhone.value = selectedClient.phone || "";
    inputcomment.value = selectedClient.comment || "";
    console.log("Updated values:", inputAddress.value, inputPhone.value, inputcomment.value);
    dropdown.innerHTML = "";
  } else {
    console.warn("Client not found for selected name:", selectedClientName);
  }
});

            });
          })
          .catch(function (error) {
            console.error("Error fetching data:", error);
          });
      });

      inp.addEventListener("keydown", function (event) {
        const autocompleteItemElements = document.querySelectorAll(".autocomplete-item");
        if (event.key === "ArrowDown" && autocompleteItemElements.length > 0) {
          autocompleteItemElements[0].focus();
        } else if (event.key === "ArrowUp" && autocompleteItemElements.length > 0) {
          autocompleteItemElements[autocompleteItemElements.length - 1].focus();
        }
      });

      document.addEventListener("click", function (event) {
        if (!inp.contains(event.target) && !dropdown.contains(event.target)) {
          dropdown.innerHTML = "";
        }
      });
    });



</script>
 



      <%- include('nav bar/navbardown.ejs') %>